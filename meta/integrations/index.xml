<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Интеграции on META | Devision Developers</title>
    <link>https://developers.devision.io/meta/integrations/</link>
    <description>Recent content in Интеграции on META | Devision Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    
	<atom:link href="https://developers.devision.io/meta/integrations/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Billing</title>
      <link>https://developers.devision.io/meta/integrations/billing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/billing/</guid>
      <description>Java API
Example
&amp;lt;elem states=&amp;quot;default&amp;quot;&amp;gt; &amp;lt;tpl&amp;gt; &amp;lt;p&amp;gt; BillingService нужен для накладывания ограничений на доступный функционал &amp;lt;/p&amp;gt; &amp;lt;p class=&amp;quot;text-warning&amp;quot;&amp;gt; Для просмотра логов откройте chrome devtools console и включили dev mode в мете. &amp;lt;/p&amp;gt; &amp;lt;a ng-click=&amp;quot;changeState(&#39;test_in_js&#39;, {})&amp;quot; href&amp;gt;Go To JS&amp;lt;/a&amp;gt; &amp;lt;/tpl&amp;gt; &amp;lt;/elem&amp;gt; &amp;lt;script type=&amp;quot;meta/js&amp;quot; id=&amp;quot;ex0&amp;quot; states=&amp;quot;test_in_js&amp;quot;&amp;gt; function main(log) { log.info(&#39;ex0 выполняется в любом случае, так как он перед проверкой по биллингу&#39;); } &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;meta/js&amp;quot; id=&amp;quot;ex1&amp;quot; states=&amp;quot;test_in_js&amp;quot;&amp;gt; function main(log, env, vm, pvm, BillingService) { log.</description>
    </item>
    
    <item>
      <title>ApiClientService</title>
      <link>https://developers.devision.io/meta/integrations/api_client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/api_client/</guid>
      <description>Если вы хотите работать со внутренними api Прямо из META
&amp;lt;script id=&amp;quot;res&amp;quot; type=&amp;quot;meta/js&amp;quot;&amp;gt; function main(ApiClientService, vm) { var apiclient = ApiClientService.buildClient(&amp;quot;accountmanagement&amp;quot;, &amp;quot;v1beta1&amp;quot;, env.userId, [&amp;quot;meta.dev&amp;quot;]); vm.data = apiclient.request(&amp;quot;POST&amp;quot;, &amp;quot;budget-order/get&amp;quot;, { &amp;quot;access_scope&amp;quot;: { &amp;quot;client_id&amp;quot;: &amp;quot;28&amp;quot;, &amp;quot;agency_account&amp;quot;: &amp;quot;larisoll2323@gmail.com&amp;quot;, &amp;quot;operation_id&amp;quot;: MetaUtils.uuid.randomUUID() }, &amp;quot;engine&amp;quot;: &amp;quot;GOOGLE_ADS&amp;quot;, &amp;quot;account&amp;quot;: &amp;quot;9012273876&amp;quot; }).getMap(); // or .getObject() // or.getList() } &amp;lt;/script&amp;gt; &amp;lt;elem&amp;gt; &amp;lt;tpl&amp;gt; {{res|json}} &amp;lt;/tpl&amp;gt; &amp;lt;/elem&amp;gt;  </description>
    </item>
    
    <item>
      <title>Google Analytics</title>
      <link>https://developers.devision.io/meta/integrations/google_analytics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/google_analytics/</guid>
      <description>Google Analytics уже глубоко интегрирован в платформу и многие нужные вам события с интерфейса и backend зачастую автоматически будут поступать в GA.
Автоматически собираемые действия  Открытия страниц Открытие модальных окон (в т.ч. sidenav) Регистрация События ADD из ObjectLogService Клик на кнопку добавление объекта в me-select Выбор пункта меню в me-input type=menu-btn  Отправка событий через Measurement Protocol В скриптах meta/js или meta/sql (с помощью шаблонизатора) вы можете отправлять нужные вам события в GA.</description>
    </item>
    
    <item>
      <title>Вход через META</title>
      <link>https://developers.devision.io/meta/integrations/login_with_meta/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/login_with_meta/</guid>
      <description>Приложение запрашивает код Получение токена в обмен на код, извлеченный из URL:
 Приложение направляет пользователя на страницу META.OAuth, где он может разрешить доступ к своим данным. Пользователь разрешает доступ приложению. META.OAuth перенаправляет пользователя на адрес, указанный в поле Callback URL при регистрации приложения. Код подтверждения (или описание ошибки) передается в параметре URL перенаправления. Приложение получает адрес перенаправления и извлекает код подтверждения. Приложение отправляет POST-запрос с кодом. META.OAuth возвращает токен или ошибку в теле ответа.</description>
    </item>
    
    <item>
      <title>Embedded Frames</title>
      <link>https://developers.devision.io/meta/integrations/embedded_frames/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/embedded_frames/</guid>
      <description>Пример на основе интеграции старого Garpun в новое META-приложение
В Garpun мы разместили код
&amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt; function inIframe() { try { return window.self !== window.top; } catch (e) { return true; } } document.addEventListener(&amp;quot;DOMContentLoaded&amp;quot;, function () { if (inIframe()) { // Это мы использовали чтобы убрать ненужные кнопки document.body.classList.add(&amp;quot;garpunEmbedded&amp;quot;); } document.body.classList.remove(&amp;quot;garpunLoading&amp;quot;); }); // (metaframewatcher = window.metaframewatcher || []).push({ height_classes: [&#39;t_window&#39;, &#39;cover&#39;, &#39;stickyWrap&#39;, &#39;mainBox&#39;] }); if (inIframe()) { // Это не относится к задаче встраивания напрямую, но наверняка будет полезно для GTM для отключения виджетов поддержки и пр window[&#39;IS_EMBED_MODE&#39;] = true; // Размещаем загрузки интеграционного скрипта (function() { var lt = document.</description>
    </item>
    
    <item>
      <title>Nginx Proxy Headers</title>
      <link>https://developers.devision.io/meta/integrations/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/nginx/</guid>
      <description>Настраиваются на nginx при проксировании запосов в Java приложение, или через Chrome плагин ModHeader (https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj) для разработки
X-META-AppID Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр
server { listen *:80; server_name example.com; charset utf8; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-META-AppID 3; proxy_pass http://127.0.0.1:8083; } }  X-META-Allowed-Apps Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр Отличается от HEADER_X_META_APP_ID тем, что это будет работать как просто meta.</description>
    </item>
    
    <item>
      <title>SDK</title>
      <link>https://developers.devision.io/meta/integrations/sdk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/integrations/sdk/</guid>
      <description>Существует официальная библиотека для работу с метой на Python3
Исходники
Документация</description>
    </item>
    
  </channel>
</rss>