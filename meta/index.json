[
{
	"uri": "https://developers.devision.io/meta/guides/request_life_cycle/",
	"title": "Жизненный цикл запроса",
	"tags": [],
	"description": "",
	"content": " Введение При чтении этого раздела вам могут понадобится подробности, описанные в разделе [Типы и атрибуты скриптов](/guides/script_types/)  Окружение запроса  env - объект-окружение запроса к серверу. vm - объект для удобной работы с ответом клиенту. На лего странцах отдельный vm на каждый script. pvm - только на LEGO-страницах. Отвечает за хранение данных на всех странце, содержит в себе vm script. DataResult - низкоуровневый класс, отвечающий за ответ с данными по EntityPage. Его нельзя получить так как он никуда не передается, существует вне script - над ним. Создается вручную при необходимости только в meta/js скриптах. Содержит в себе pvm, который в свою очередь и передается в страницы. В общем случае не рекомендуетсяим пользоваться без крайней необходимости, хотя он может быть полезен для построении таблиз из js на основе данных какого-либо api без сохранения в БД.  Состояния страниц  env.state - id текущего состояния страницы. Это можно сравнить с action в контроллере MVC. При первоначальной загрузке страница загружается с state=default, если у script или elem не указан states, то meta попытается их выполнить, если будут удовлетворены зависимости, указанные через depends env.sp - параметры состояния  Выполенение url типа /page. Пример для env.sp Рассмотрим жизненный цикл на основе примера с обычной странице с таблицей и фильтром - https://samples-demo.devision.io/page?p=3398\u0026amp;a=35\nИтак, что происходит, когда пользоатель заходит на страницу:\n Backend получает указание загрузить pageId=3398 и applicationId=35 (Мы можем видеть это из url - параметры p и a соответственно /page?p=3398\u0026amp;a=35) Backend проверяет соответствие ACL страницы и текущего пользователя  Если требуется авторизация, то пользователя редиректит на форму входа (или oauth с параметром retpath, который говорит куда нужно перебросить пользователя в случае успешной авторизации) Если авторизация не требуется, и ACL не удовлетворяет, то выдается 403  Если все ок, то мета отдает html страницу в теле которой указаны данные пользователя и список страниц текущего приложения (именно поэтому сейчас требуется f5 при изменении параметров или набора страниц) UI инициализирует компонент me-page с pageId и пр me-page начинает разрешать зависимости по текущему env и запрашивает данные путем вызова backend api /api/meta/page (вы можете наблюдать вызовы в chrome debugger) После получения данных me-page начинает рисовать root lego страницы. Это то, что страница вернула через описание через script и elem Надо сразу упомянуть, что после отрисовки root lego, если он имеет зависимости refPvmData, me-page по аналогиис первичным запуском будет пытаться разрешить и их до тех пор, пока все не будет разрешено или не вернется ошибка или пустой ответ\n\u0026lt;!-- Это скрипт с типом sql, который: - имеет id=period (т.е. будет доступен в env.sp.period) - запрашивает данные из БД с альясом meta_samples - будет оторажаться как me-input с типом daterange (elem=\u0026quot;me-input\u0026quot; elem-attrs='{\u0026quot;type\u0026quot;:\u0026quot;daterange\u0026quot;}') - это элемент пользовательского ввода в виде периода дат - имеет дефолт {\u0026quot;from\u0026quot;:\u0026quot;2014-12-01\u0026quot;, \u0026quot;to\u0026quot;:\u0026quot;2015-03-01\u0026quot;} . Т.е. при первоначальной загрузке страницы уже будет иметь значение. Это очень удобно для отчетов - Имеет приоритет вывода 10 (order) - Занимает 4 ячейки в горизонтальной сетке (span) - live-reload говорит о том, что при изменении значения инмупа страница будет обновлена с новым значением env.sp.period. Обычно это заменятеся атрибутом page-search, но для этой страницы он не нужен --\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; id=\u0026quot;period\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; default='{\u0026quot;from\u0026quot;:\u0026quot;2014-12-01\u0026quot;, \u0026quot;to\u0026quot;:\u0026quot;2015-03-01\u0026quot;}' elem=\u0026quot;me-input\u0026quot; order=\u0026quot;10\u0026quot; span=\u0026quot;4\u0026quot; elem-attrs='{\u0026quot;type\u0026quot;:\u0026quot;daterange\u0026quot;}' live-reload\u0026gt; SELECT 1 \u0026lt;/script\u0026gt; \u0026lt;!-- Теги elem используется для простых пользовательских шаблонов. Обычно это не рекомендуется делать, так как переход на другие ui фреймворки будет усложнено, но иногда так проще всего UI template. Вы можете наблюдать вот такой вызов в шаблоне {{env.sp|json}} эта строка будет выводить env.sp в виде json через систему шаблонов angularjs. Работает на frontend. В общем случае так делать не рекомендуется, так как поддержка angularjs скоро прекращается и придется переписывать такие вызовы. Backenf template. Это ${env.sp} работает freemarker - java шаблонизатор, работает на backend до того, как root lego будет возвращен на frontend. --\u0026gt; \u0026lt;elem order=\u0026quot;11\u0026quot; span=\u0026quot;3\u0026quot;\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;p\u0026gt; Тут в тесте мы проверяем, что stateParams теперь всегда и везде приходят как env.sp \u0026lt;/p\u0026gt; \u0026lt;table class=\u0026quot;table table-bordered\u0026quot; style=\u0026quot;max-width: 500px\u0026quot;\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Frontend angularjs state params\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026quot;angular-sp\u0026quot;\u0026gt;{{env.sp|json}}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Backend JS state params\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026quot;js-sp\u0026quot;\u0026gt;{{jsout.test|json}}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;tr\u0026gt; \u0026lt;td\u0026gt;Template state params\u0026lt;/td\u0026gt; \u0026lt;td class=\u0026quot;tpl-sp\u0026quot;\u0026gt;${env.sp}\u0026lt;/td\u0026gt; \u0026lt;/tr\u0026gt; \u0026lt;/table\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;jsout\u0026quot;\u0026gt; function main(vm, env) { vm.test = env.sp; } \u0026lt;/script\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;!-- Тут хорошо видно, что поле date приводится к типу date средствами postgresql и фильтруется данными из env.sp.period (:env.sp.period.from::date AND :env.sp.period.to::date) Это как раз те данные из элемента period, объявленного выше. Поскольку атрибута elem нет, то данные по умолчанию выводятся в виде таблицы (то же самое было бы, если мы поставим elem=\u0026quot;me-table\u0026quot;) Если вам надо скрыть элемент, но вернуть данные на frontend используйте elem=\u0026quot;hidden\u0026quot; Если данные не должны уходить с сервера используйте атрибут internal --\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta\u0026quot; depends=\u0026quot;period\u0026quot; id=\u0026quot;tbl\u0026quot; order=\u0026quot;50\u0026quot;\u0026gt; SELECT * FROM generate_series('2010-03-01 00:00'::timestamp, '2016-03-04 12:00', '10 hours') as date WHERE date::date BETWEEN :env.sp.period.from::date AND :env.sp.period.to::date ORDER BY date ${pager} \u0026lt;/script\u0026gt;   После того, как пользователь выбирает период дат в элементе period frontend посылает запрос в /api/meta/page с новым окружением, получает ответ и перерендеривает страницу. Все это пока меняет env.sp, но не env.state.\nВыполенение url типа /card. Пример для env.state Хороший пример тут - https://samples-demo.devision.io/page?p=5181\u0026amp;a=35\nНа странице видно список объектов, вы можете создать новый и отредактировать старый. Редактирование доступно как при клике на название объекта, так и при клике в контестном меню по пункту \u0026ldquo;Быстрое редактирование\u0026rdquo; при клике правой клавишей мыши на строке объекта.\nНа странице редактирования объекта описано все поведение меты для выполнения запроса https://samples-demo.devision.io/card?e=example_entity\u0026amp;o=08f3395b-31f2-42c9-917e-a5f2b7bd4a95\u0026amp;a=35\n\u0026lt;!-- Объявляем валидатор с depends от name. Параметр name в случае этой конкретной формы будет приходить как имя объекта. Такая валидация не обяъательна, это будет зависеть от конкретной формы. Часто это просто не надо. --\u0026gt; \u0026lt;script id=\u0026quot;name_validator\u0026quot; type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; depends=\u0026quot;name\u0026quot;\u0026gt; SELECT 'name_validator_unique' as id, 'Имя уже используется' as name FROM public.example_entity WHERE name = :env.sp.name LIMIT 1 \u0026lt;/script\u0026gt; \u0026lt;!-- Для упрощения разработки форм мы договорились, что данные объекта сужности мы всегда извлеваем в скрипте с id=info с атрибутом internal (данный атрибут не дает данным уходить на frontend) --\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;info\u0026quot; internal states=\u0026quot;default\u0026quot;\u0026gt; SELECT id, name, creation_time, last_user_id FROM public.example_entity WHERE id=NULLIF(:env.objectId, '0')::uuid LIMIT 1 \u0026lt;/script\u0026gt; \u0026lt;elem states=\u0026quot;default\u0026quot; order=\u0026quot;190\u0026quot;\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;!-- Форма при отправке будет метять env.state на save и поэтому будут исполняться скрипты6 которые описаны ниже и имеют states=\u0026quot;save\u0026quot; --\u0026gt; \u0026lt;form name=\u0026quot;editGroupForm\u0026quot; ng-submit=\u0026quot;changeState('save', {obj:env.sp.obj})\u0026quot;\u0026gt; \u0026lt;!-- Атрибут формы output важно делать именно env.sp.obj. В старом коде вы можете встретить другие значения, но в новых формах нужно всегда такой. Это позволяет передавать в форму параметры через env.sp с внешних кнопок и других форм для первичного заполнения и в целом стандартизирует разработку. --\u0026gt; \u0026lt;me-lego elems=\u0026quot;editCard.elems\u0026quot; output=\u0026quot;env.sp.obj\u0026quot;\u0026gt;\u0026lt;/me-lego\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;editCard\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; function main(vm, pvm, env) { // Получаем инфу из бд, если редактирвание или указываем значение по умолчанию var info = pvm.data.info.notEmpty ? pvm.data.info.rows[0] : {}; // Не добавляейте в env секретные поля - эти данные уйдут в интерфейс // Говорим мете, что при первичной загрузке страницы в env sp нужно положить данные из info в obj // Далее они будут доступны как env.sp.obj pvm.initEnvSp(env, {obj: info}); vm.elems = [ { id: \u0026quot;name\u0026quot;, label: \u0026quot;Название\u0026quot;, span: 12, name: \u0026quot;me-input\u0026quot;, // Таким образом мы настраиваем валидатор на поле. // Подробный пример о валидаторах - https://samples-demo.devision.io/page?p=3443\u0026amp;a=35 refPvmValidator: {id: \u0026quot;name_validator\u0026quot;}, attrs: { required: true, min: 2, max: 30 } }, // Просто перенос строки {name: \u0026quot;newrow\u0026quot;}, // Кнопка отправки формы { id: \u0026quot;submit\u0026quot;, name: \u0026quot;me-submit\u0026quot;, attrs: { value: '${i18n(\u0026quot;common.saveButton\u0026quot;)}' } } ]; } \u0026lt;/script\u0026gt; \u0026lt;!-- В Postgres почти всегда хорошо делать INSERT ON CONFLICT DO UPDATE если вы не боитель роста инкремента в id (если он у вас имеет тип serial или bigserial) --\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;save\u0026quot; id=\u0026quot;upsert\u0026quot;\u0026gt; INSERT INTO example_entity (id, name, last_user_id) VALUES ( COALESCE(NULLIF(:env.objectId, '0')::uuid, uuid_generate_v4()), :env.sp.obj.name, :env.userId ) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name RETURNING id; \u0026lt;/script\u0026gt; \u0026lt;!-- elem=\u0026quot;hidden\u0026quot; делает скрипт невидимым states может содержать список стейтов разделенных запятой, в нашем случае и обычно это не нужно. Если states не указан, что скрипт работает на всех стейтах states=\u0026quot;save\u0026quot; говорит о том, что скрипт будет выполнятся только при выполнении условия, что env.state IN (states) --\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;save\u0026quot;\u0026gt; function main(pvm, vm, env, ObjectLogService) { // Это простой относительно новый способ узнать работаем ли мы с уже созданным объектом или с новым. // Ранее использовалось сравнение с нулем - env.objectId == '0', но теперь в этом нет необходимости и можно использовать более явное условие var isNew = !env.hasObjectId; // Получаем ранее вставленный id или id из URL var objectId = isNew ? pvm.data.upsert.rows[0].id : env.objectId; if (isNew) { // Это не обязательно, но обычно менеджер просит заредиректить пользователя на URL карточки свежесозданного объекта pvm.redirect = { url: \u0026quot;/card?e=\u0026quot; + env.entityId + \u0026quot;\u0026amp;o=\u0026quot; + objectId + \u0026quot;\u0026amp;a=\u0026quot; + env.applicationId }; } else { // Говорит о том, что надо вернуться к первоначальному состоянию страницы // state=default // firstLoading = true pvm.toInitialState(); // Если страница будет открыта в модальном окне эта инструкция будет указывть мете, что окно надо закрыть pvm.closeModal(); } // Показать popup. В принципе popup, как и все эти инструкции кроме ObjectLogService.logValue можно ставить в любом порядке, // так как они будут реально выполнены ли на frontend или как toInitialState в конце обработки script pvm.popup = {level: \u0026quot;success\u0026quot;, message: \u0026quot;${i18n('common.saveSuccess')}\u0026quot;}; // Залогировать действие над объектом сущности. Будет отгружено в БД и в логи, из логов обычно перемещается в BigQuery ObjectLogService.logValue(env.entityId, objectId, isNew ? 'ADD' : 'SET', env.sp.obj); } \u0026lt;/script\u0026gt;  Код примера Надо сказать, что обычно state меняется при сабмите формы, просто через html yе меняем, но этот пример может показать что происходит.\nВот простой код для примера. Тут три ссылки, которые меняют состояние страницы. В script-ах указаны states, в которых script будет участвовать (будет выполняться). Если states для script или elem не указан, то script или elem участвует во всех state.\n\u0026lt;elem\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;a ng-click=\u0026quot;changeState('first', {'foo':1})\u0026quot;\u0026gt;to first\u0026lt;/a\u0026gt; | \u0026lt;a ng-click=\u0026quot;changeState('two', {'bar':2})\u0026quot;\u0026gt;to two\u0026lt;/a\u0026gt; | \u0026lt;a ng-click=\u0026quot;changeState('three', env.sp)\u0026quot;\u0026gt;to three\u0026lt;/a\u0026gt; | \u0026lt;hr\u0026gt; state: {{env.state}} \u0026lt;br\u0026gt; \u0026lt;pre\u0026gt;{{env.sp|json}}\u0026lt;/pre\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; span=\u0026quot;4\u0026quot; states=\u0026quot;first\u0026quot;\u0026gt; select 1 \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; span=\u0026quot;4\u0026quot; states=\u0026quot;two\u0026quot;\u0026gt; select 2 \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; span=\u0026quot;4\u0026quot; states=\u0026quot;first, two\u0026quot;\u0026gt; select 3 \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;w\u0026quot; states=\u0026quot;three\u0026quot;\u0026gt; function main(vm, pvm, env) { // Говорит мете, что страницу надо вернуть в изначальное состояние с параметрами по умолчанию pvm.toInitialState(); } \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/guides/roles/",
	"title": "Роли пользователей",
	"tags": [],
	"description": "",
	"content": " Что такое и где используются? Сразу скажем, что это не совсем роли, это скорее что-то вроде списка тегов или аудиторий. Роли используются как обычно для фильтрации доступного функционала.\nОни пересчитываются при авторизации и помещаются в env.roles\nЧтобы обновить данные по текущему пользователю мы можете использовать код на meta/js:\nCurrentUserService.reload();  Чтобы обновить данные по любому пользователю мы можете использовать код на meta/js:\nPubSubService.pubReloadUser(userId);  Какие бывают Системные роли  meta.role.all - все пользователи - с авторизацией и без meta.role.anon - неавторизованные пользователи meta.role.auth - авторизованные пользователи meta.role.dev - разработчики meta.role.support - техническая поддержка meta.role.preset_admin - администратор созраненых фильтров (пресетов) страниц  Динамические роли Выдаются при авторизации\n c{COMPANY_ID} - имеют все пользователи, входящие в company. Если надо выдать доступ к чему-то всем пользователям одной компании u{USER_ID} - Если надо выдать доступ к чему-то конкретному пользователю  AdHands роли Выдается из данных поля users.roles[0] - adhands.role.{ADHANDS_ROLE_ID} - у кадого пользователя есть одна роль из-за наследственности от adhands\nПример использования Для фильтрации данных Типичный случай использования фильтров данных, который отлично себя зарекомендовал:\nAND allowed_roles \u0026amp;\u0026amp; ARRAY[ :env.roles ]::text[]  В таблице создается поле allowed_roles text[] и туда по надобности добавляются нужные роли.\nЭто круто и удобно потому, что:\n У вас всего одно поле и с ним проще работать и меньше кода Поле можно проиндексировать и опять же оно одно и расширяется очень легко Поиск пересечений в одном поле лучше чем OR на разные поля Добавляя это поле вы перестаете парится вопросами:  как ограничить доступ конкретной компании или группе а что если надо добавить еще конкретного пользователя или более одного нужно добавлять группу пользователей, при этоу управление группой - отдельная песня и не является ACL напрямую   Использование в meta/js Обратите внимание, что в meta/js env является не внутренним объектов меты, а иеент тип Mapи для того, чтобы работать с реальным env надо использовать originalEnv:\n originalEnv.hasRoleAnon() - быстро-фильтр на проверку неавторозованных пользователей originalEnv.hasRoleDev() - быстро-фильтр на проверку пользователей-разработчиков originalEnv.hasRoleSupport() - быстро-фильтр на проверку пользователей-саппорта originalEnv.hasAnyRoles([\u0026lsquo;adhands.role.97\u0026rsquo;, \u0026lsquo;meta.role.dev\u0026rsquo;]) - поиск пересечений. Вернет true, если в env.roles есть хотябы одна указанная роль originalEnv.hasRole(\u0026ldquo;meta.role.preset_admin\u0026rdquo;) - выполняет все то, что и hasAnyRoles, нона вход только одна роль  "
},
{
	"uri": "https://developers.devision.io/meta/guides/script_types/",
	"title": "Типы и атрибуты скриптов",
	"tags": [],
	"description": "",
	"content": " Мотивация Скрипты это блоки получения или изменения данных, имеют атрибуты: - type - определяет тип получения данных: sql, js - id - имя данных для меты, используется для последующих обращений к данным. Грубо говоря имя переменной - elem-attrs - доп. атрибуты элемента конкретного типа\nАтрибуты elem-attrs Конфигурируют элемент, указанный в атрибуте elem. Для каждого elem они могут быть разными - ищите нужную документацию в структуре всех классов.\nЧаще всего вы будете использовать атрибуты, указывая их в виде json-обекта как в этом примере:\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; id=\u0026quot;issues\u0026quot; order=\u0026quot;100500\u0026quot; entity-id=\u0026quot;2701\u0026quot; elem-attrs='{\u0026quot;addObjectButton\u0026quot;:{ \u0026quot;mode\u0026quot;:\u0026quot;sidenav\u0026quot;}}'\u0026gt; ...  (beta) Для атрибутов типа строка и число вы можете использовать inline стиль написания, это удобно для более простой шаблонизации или боее ясного написания сложных объектов\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; order=\u0026quot;400\u0026quot; id=\u0026quot;res\u0026quot; entity-id=\u0026quot;2830\u0026quot; db-alias=\u0026quot;meta\u0026quot; entity-id=\u0026quot;ex_system\u0026quot; elem=\u0026quot;me-card-list\u0026quot; elem-attrs.entityCardLink.mode='sidenav' elem-attrs.entityCardLink.drawTopMenu='false' elem-attrs.grid.cardMaxWidth=\u0026quot;350px\u0026quot; elem-attrs.grid.sizeNormal=\u0026quot;20\u0026quot; elem-attrs.grid.sizeMd=\u0026quot;25\u0026quot; elem-attrs.grid.sizeSm=\u0026quot;33\u0026quot; elem-attrs.grid.sizeXs=\u0026quot;100\u0026quot; elem-attrs.helpTemplate.cssStyle.background='#3689ff' elem-attrs.helpTemplate.cssStyle.color='#fff' ...  Отображение элементов в сетке UI сетка состоит из 12 столбцов, ячейки сетки не используют flex, идут слева направо и естественным образом переносятся на новую строку. Если нужно сделать новую строку используйте элемент с именем newrow:\n\u0026lt;elem name=\u0026quot;newrow\u0026quot;\u0026gt;\u0026lt;/elem\u0026gt;  Или если вы описываете LEGO на json, то это выглядит так (полный пример):\n{ \u0026quot;name\u0026quot;: \u0026quot;newrow\u0026quot; }  Атрибут order Атрибут Не влияет на порядов исполенения скриптов на backend, а только определяет спорядов в сетке. Чем больше значение, тем правее и ниже будет элемент.\nАтрибут span Определяет ширину элемента в сетке. Например если будет span=\u0026ldquo;12\u0026rdquo; (значение по-умолчанию) то элемент будет занимать всю ширину страницы, span=\u0026ldquo;6\u0026rdquo; - только половину.\nАтрибут offset Работае как и span по ширине в сетке, но отвечает за левый отступ. Например, если у нас span=\u0026ldquo;4\u0026rdquo; и offset=\u0026ldquo;4\u0026rdquo;, то наш элемент будет занимать 1\u0026frasl;3 ширины страницы и на 1\u0026frasl;3 будет сдвинут слева, т.е. будет находится примерно по середине.\nАтрибут align Центрирует контент элемента. Может быть: left (по умолчанию), right или center.\nКлючевое слово internal Используется для того, чтобы получить данные на серверной стороне и не отправлять их на клиент. Это ускоряет страницу и позволяет 100% защитить программиста от случайно передачи секретной информации на клиент.\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; id=\u0026quot;my_data\u0026quot; internal\u0026gt; SELECT 1 \u0026lt;/script\u0026gt;  Ключевое слово async Является ли скрипт асинхронным, по умолчанию равно false. Если true, то при загрузке страницы скрипт не будет выполнен. Будет считаться, что эти данные будут загружаться браузером асинхронно. При этом это может использоваться как для me-input, так и для просто refPvmData. Это очень удобно для медленных графиков или того, что можно догрузить после всего.\nУсловия do-if Используется для условной фильтрации скриптов и элементов на бекенде. Скрипты не будет исполняться и будет предотвращать отрисовку связанных элементов. Элементы, при установки do-if на них не будут приходить на фронтенд\nПример: https://samples-demo.devision.io/page?p=4551\u0026amp;a=35\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta\u0026quot; id=\u0026quot;all_activity\u0026quot; do-if=\u0026quot;env.sp.activity_mode=='all'\u0026quot;\u0026gt; select now() \u0026lt;/script\u0026gt;  Атрибут exportable (по умолчанию true) Управляет возможностью выгружать таблицу\nАтрибут analyzable (по умолчанию true) Управляет возможностью делать анализ данных на таблице\nSQL управляемый скрипт (meta/sql) Основной способ получения данных, рекомендуется вибирать именно его, а не meta/js в пробладающем кол-во вслучаев. Исполняется на указанной в db-alias базе данных Выполняет SQL с синтактисом указанной БД без магических модификаций\nСуществуют макросы для упрощения жизни разработчика:\n${pager} - для вставки пагинатора\n${sort} - для вставки сортировки\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;tableWithFooterWithoutPagerTotal\u0026quot; label=\u0026quot;Таблица с футером, но без расширенного пагинатора\u0026quot; span=\u0026quot;4\u0026quot; order=\u0026quot;71\u0026quot;\u0026gt; WITH empls AS ( SELECT (generate_series || employee.\u0026quot;employeeId\u0026quot;::text)::int as seq, employee.* FROM \u0026quot;public\u0026quot;.\u0026quot;employee\u0026quot;, generate_series(1, 50) ) SELECT empls.seq, empls.\u0026quot;employeeId\u0026quot;, empls.name, empls.salary, json_build_object( 'footerRows', json_build_array( json_build_object('name', 'Ср. зарплата', 'salary', (avg(empls.salary) over())), json_build_object('name', 'Итого', 'salary', (sum(empls.salary) over())) ) ) as table_props_field FROM empls order by ${sort}, 1 ${pager} \u0026lt;/script\u0026gt;  Лимит строк (атрибут max-rows) По-умолчанию 50 000 строк данных будет нормально возвращаться для скрипта или любого другого запроса в БД. Если строк придет больше, то скрипт вернет ошибку и не вернет результатов. Если вам не хватает значения 50к - вы можете увеличить его атрибутом скрипта\n\u0026lt;script ... max-rows=\u0026quot;999999\u0026quot;\u0026gt; ...  Чтение и Обновление данных (атрибут no-result) По-умолчанию script выполняет функция query() в сервисе запросов к БД. Функция query ожидает, что запрос вернет результат, поэтому c SELECT все будет хорошо, а для INSERT, UPDATE, DELETE и пр нужно делать RETURNING если это Postgres, либо ставить no-result на скрипте. Это будет вызывать функцию update(), которая ждет, что ничего не будет возвращено и будет ругаться, если что-то вернется\nПример: https://samples-demo.devision.io/page?p=4105\u0026amp;a=35\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;upd\u0026quot; no-result\u0026gt; UPDATE counters SET inc = inc + 1 WHERE name='md_source_update' \u0026lt;/script\u0026gt;  JavaScript управляемый скрипт (meta/js) **Стоит учесть** Дизайн разработки в мете преполагает использование механизмов БД всегда, когда это можно. Рекомендуется обрабатывать данные внутри БД, а не затаскивать в код приложения, чтобы, например почистить данные или не дай бог просуммировать. PostgreSQL очень хорошо справляется почти со всем задачами по обработке данных.  Обрабатывается через Nashorn поэтому работает не всегда так же как обычный JavaScript\nВ скриптах выглядит следующим образом:\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;tbl_with_js_footer\u0026quot; \u0026gt; function main() { return DataResult.newBuilder() .field('id', 'id', 'TEXT') .field('name', 'name', 'TEXT') .field('value', 'value', 'LONG') .headerRow({ name: { value: '100%', description: \u0026quot;% - это ...\u0026quot; }, value: { value: 2230, description: \u0026quot;Текст описания, возможно достаточно длинный\u0026quot; } }) .headerRow({value: { value: '110%' }}) .row({id: 1, name: \u0026quot;A\u0026quot;, value: 10}) .row({id: 2, name: \u0026quot;B\u0026quot;, value: 20}) .footerRow({name: \u0026quot;Первая строка\u0026quot;, value: 2230}) .footerRow({name: \u0026quot;Вторая строка\u0026quot;, value: 330}) .footerRow({name: \u0026quot;N строка\u0026quot;, value: 2000}) .build(); } \u0026lt;/script\u0026gt;  Пример со страницы http://samples-demo.devision.io/page?a=35\u0026amp;p=3497\nФункции  json.to(Object) - объект в json json.from(String) - json в объект MetaUtils.convert.toDouble(String) - переводит строку в число с плавающей точкой MetaUtils.convert.toInt(String) - переводит строку в число int MetaUtils.convert.toLong(String) - переводит строку в число bigint MetaUtils.meinput.filecontent.readBase64(String) - переводит html base64 строку в строку, пригодную для чтения функиями работы с base64  Popup, ChangeState Типичный код после UPDATE/INSERT в карточке объекта. Кидает попап, переводит состояние страницы в default с очисткой параметров env.sp А так же логирует действие с объектом.\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;save\u0026quot;\u0026gt; function main(pvm, vm, env, ObjectLogService) { var objectId = MetaUtils.convert.toLong(env.object_id); pvm.popup = {level: \u0026quot;success\u0026quot;, message: \u0026quot;Объект сохранен\u0026quot;}; pvm.setEnvSp({}); pvm.changeState('default'); ObjectLogService.logValue(env.entityId, objectId, 'SET', env.sp.obj); } \u0026lt;/script\u0026gt;  Частичное изменение env sp с backend (patchEnvSp) Пример: https://samples-demo.devision.io/page?p=5196\u0026amp;a=35\nНапример, вы хотите реализовать такую логику: \u0026ldquo;Пользователь на форме ввел ИНН в поле, бекенд вернул часть value данных для формы и Мета все заполнила. Поля после этого можно изменять, но если ИНН изменят опять - данные перезаполняются.\u0026rdquo;\nДелается через механизм серверной валидации, так как скорее всего мы заходите проверить ввод данных, перед заполнением других полей. Механизм refPvmValidator позволяет изменять env.sp, если вы вызовите pvm.patchEnvSp. Если в refPvmValidator вам нужны данные из БД, используйте additionalPartialLoad, например так:\nrefPvmValidator: {id: \u0026quot;my_validator\u0026quot;, sp: {}, additionalPartialLoad: [\u0026quot;my_external_sql_data\u0026quot;, \u0026quot;my_data_loader\u0026quot;]},  Обратите внимание, что patchEnvSp перечает частичные данные и мета делает deep merge и перезаписывает только те данные, которые вы передали. **Пример 1:** - Было: {\"a\": 1, \"b\": {\"in\": 42}} - Передали: {\"a\": 2} - Будет: {\"a\": 2, \"b\": {\"in\": 42}} **Пример 2:** - Было: {\"a\": 1, \"b\": {\"in\": 42}} - Передали: {\"b\": {\"foo\": 777}} - Будет: {\"a\": 1, \"b\": {\"in\": 42, \"foo\": 777}} **Пример 3:** - Было: {\"a\": 1, \"b\": {\"in\": 42}} - Передали: {\"b\": {}} - Будет: {\"a\": 1, \"b\": {\"in\": 42}}  Для полной перезаписи env.sp используйте pvm.setEnvSp()\n\u0026lt;script id=\u0026quot;my_validator\u0026quot; type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; depends=\u0026quot;name\u0026quot;\u0026gt; SELECT 'unique_client' as id, 'Клиент не может присутствовать в списке больше одного раза: ' as name LIMIT 0 \u0026lt;/script\u0026gt; \u0026lt;script id=\u0026quot;my_external_sql_data\u0026quot; type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; depends=\u0026quot;name\u0026quot;\u0026gt; SELECT NOW() as my_time \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;my_data_loader\u0026quot; depends=\u0026quot;name\u0026quot;\u0026gt; function main(pvm, env) { if (pvm.data.my_validator.rows.length === 0) { pvm.patchEnvSp({obj: { name_gen: env.sp.obj.name + \u0026quot;11111 \u0026quot; + pvm.data.my_external_sql_data.rows[0].my_time, other_form_data: env.sp.obj.name + \u0026quot;222222\u0026quot;, }}); } } \u0026lt;/script\u0026gt; \u0026lt;elem states=\u0026quot;default\u0026quot;\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;form name=\u0026quot;editGroupForm\u0026quot; ng-submit=\u0026quot;changeState('save', {obj:env.sp.obj})\u0026quot;\u0026gt; \u0026lt;me-lego elems=\u0026quot;editGroup.legoForm\u0026quot; output=\u0026quot;env.sp.obj\u0026quot; \u0026gt;\u0026lt;/me-lego\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;editGroup\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; function main(env, log, vm, pvm) { vm.legoForm = [ { id: \u0026quot;name\u0026quot;, label: \u0026quot;Имя сотрудника\u0026quot;, help: 'Это имя будет отображаться на списках', name: \u0026quot;me-input\u0026quot;, refPvmValidator: {id: \u0026quot;my_validator\u0026quot;, sp: {}, additionalPartialLoad: [\u0026quot;my_external_sql_data\u0026quot;, \u0026quot;my_data_loader\u0026quot;]}, attrs: { type: \u0026quot;text\u0026quot;, placeholder: 'Иван', required: true, min: 3, max: 100 } }, { id: \u0026quot;name_gen\u0026quot;, label: \u0026quot;Поле с генерируемым контентом\u0026quot;, name: \u0026quot;me-input\u0026quot;, attrs: { type: \u0026quot;text\u0026quot;, placeholder: 'Иван', required: true, min: 0, max: 100 } }, { id: \u0026quot;other_form_data\u0026quot;, label: \u0026quot;Еще какое-то поле\u0026quot;, name: \u0026quot;me-input\u0026quot;, attrs: { type: \u0026quot;text\u0026quot; } }, { name: \u0026quot;me-submit\u0026quot;, attrs: { value: 'Сохранить' } }, ]; } \u0026lt;/script\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;elem states=\u0026quot;save\u0026quot;\u0026gt; \u0026lt;tpl\u0026gt; Данные формы: \u0026lt;pre\u0026gt; {{env.sp|json}} \u0026lt;/pre\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;/elem\u0026gt;  Заполнение Env при первоначальной загрузке страницы pvm.initEnvSp заполняет env.sp со стороны сервера первый раз при загрузке страницы.\nПример заполнения на константами \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;my_init_script\u0026quot; \u0026gt; function main(env, pvm) { pvm.initEnvSp(env, { \u0026quot;period\u0026quot;: {\u0026quot;from\u0026quot;:\u0026quot;${ref.now.withDayOfMonth(1)?date}\u0026quot;, \u0026quot;to\u0026quot;:\u0026quot;${ref.now?date}\u0026quot;} }); } \u0026lt;/script\u0026gt;  Пример заполнения env.sp из запроса \u0026lt;script type=\u0026quot;meta/sql\u0026quot; id=\u0026quot;my_init_info\u0026quot; internal\u0026gt; SELECT ........ \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;my_init_script\u0026quot; \u0026gt; function main(env, pvm) { var init_info = pvm.data.my_init_info.rows[0]; pvm.initEnvSp(env, { \u0026quot;period\u0026quot;: {\u0026quot;from\u0026quot;:init_info.start_date, \u0026quot;to\u0026quot;:init_info.end_date} }); } \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/integrations/billing/",
	"title": "Billing",
	"tags": [],
	"description": "",
	"content": "Java API\nExample\n\u0026lt;elem states=\u0026quot;default\u0026quot;\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;p\u0026gt; BillingService нужен для накладывания ограничений на доступный функционал \u0026lt;/p\u0026gt; \u0026lt;p class=\u0026quot;text-warning\u0026quot;\u0026gt; Для просмотра логов откройте chrome devtools console и включили dev mode в мете. \u0026lt;/p\u0026gt; \u0026lt;a ng-click=\u0026quot;changeState('test_in_js', {})\u0026quot; href\u0026gt;Go To JS\u0026lt;/a\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;ex0\u0026quot; states=\u0026quot;test_in_js\u0026quot;\u0026gt; function main(log) { log.info('ex0 выполняется в любом случае, так как он перед проверкой по биллингу'); } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;ex1\u0026quot; states=\u0026quot;test_in_js\u0026quot;\u0026gt; function main(log, env, vm, pvm, BillingService) { log.info('ex1 Перед проверкой по биллингу'); // Метод checkAddSkuUsage бросает исключение PaymentRequiredException и останавливает выполенение скриптов за BillingService.checkAddSkuUsage('feeds', 'feeds-streams-count', 10); log.info('ex1 Этот код уже не исполнится, если будет PaymentRequiredException'); } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;ex2\u0026quot; states=\u0026quot;test_in_js\u0026quot;\u0026gt; function main(log, BillingService) { // В случае исключения PaymentRequiredException этот скрипт уже не выполнится // В нашем примере мы всегда получаем исключение log.info('ex2 только, если мы не получили PaymentRequiredException'); } \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/guides/",
	"title": "Руководства",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/integrations/api_client/",
	"title": "ApiClientService",
	"tags": [],
	"description": "",
	"content": "Если вы хотите работать со внутренними api Прямо из META\n\u0026lt;script id=\u0026quot;res\u0026quot; type=\u0026quot;meta/js\u0026quot;\u0026gt; function main(ApiClientService, vm) { var apiclient = ApiClientService.buildClient(\u0026quot;accountmanagement\u0026quot;, \u0026quot;v1beta1\u0026quot;, env.userId, [\u0026quot;meta.dev\u0026quot;]); vm.data = apiclient.request(\u0026quot;POST\u0026quot;, \u0026quot;budget-order/get\u0026quot;, { \u0026quot;access_scope\u0026quot;: { \u0026quot;client_id\u0026quot;: \u0026quot;28\u0026quot;, \u0026quot;agency_account\u0026quot;: \u0026quot;larisoll2323@gmail.com\u0026quot;, \u0026quot;operation_id\u0026quot;: MetaUtils.uuid.randomUUID() }, \u0026quot;engine\u0026quot;: \u0026quot;GOOGLE_ADS\u0026quot;, \u0026quot;account\u0026quot;: \u0026quot;9012273876\u0026quot; }).getMap(); // or .getObject() // or.getList() } \u0026lt;/script\u0026gt; \u0026lt;elem\u0026gt; \u0026lt;tpl\u0026gt; {{res|json}} \u0026lt;/tpl\u0026gt; \u0026lt;/elem\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/configs/capp/",
	"title": "App",
	"tags": [],
	"description": "",
	"content": " Конфигурация приложений Конфигурация приложений расположена в файле apps.yaml в корне app-content.\nФайл содержит в себе структуру:\napps: - id: string # ID приложения name: string # Имя приложения. Выводится везде для всех alias: string # для тикетов и мета страницы и для фидов description: string # Для вывода разработчикам category: string # Название категории для разработчиков site_url: string # Для редиректа на логин, скачивание файлов и пр. favicon_url: string # Ссылка на favicon picture_url: string # Основная нормальная иконка приложения middle_picture_url: string # Если указано - выводится на иконке внутри приложения, если нет - то picture_url login_picture_url: string # Если указано - выводится на форме логина, если нет - то picture_url help_url: string # Ссылка на хелп в приложении is_join_user_enabled: string # Можно ли зарегистрироваться через это приложение is_fast_google_auth_enabled: string # Включена ли функция быстрого входа через Google - https://developers.google.com/identity/one-tap/web is_global_search_enabled: bool # Доступен ли интерфейс глобального поиска is_hide_first_item_in_top_menu: bool # Некоторые приложения нуждаются в скрытии первого элемента меню, но при этом клик по лого приложния все также должен перенаправлять пользователя на эту страницу. oauth_server: server_url: string # Schema + host. Например https://account.devision.io client_id: string # ClientID полученый через Cloud. Записан в id в meta.oauth_client client_secret: string # ClientSecret полученый через Cloud. Записан в secret в meta.oauth_client acl: map # Map ключ значение. Повторяет схему acl для страниц. Смотрите в примерах i18n: ru: join_app_name: string # Имя приложения при регистрации public_offer_url: string # Ссылка на подтверждение оферты при регистрации privacy_policy_url: string # Ссылка на документацию по работе с персональными данными en: # по аналогии ... # любой язык по аналогии ... - id: string # ID приложения 2 # ....  Параметры bool по умолчанию принимают значения false\n"
},
{
	"uri": "https://developers.devision.io/meta/work_with_data/datadiff/",
	"title": "DataDiffService",
	"tags": [],
	"description": "",
	"content": " Мотивация Сервис по вычислению разницы между двумя DataResult. В 99% случаев работает сравнимо по скорости с вариантами сравнения сложных данных через запрос в БД, но при этом код сравнения на порядок проще, чем тоже самое на SQL.\nПример использования: https://samples-demo.devision.io/page?p=4363\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/work_with_data/datatransform/",
	"title": "DataTransformService",
	"tags": [],
	"description": "",
	"content": " Мотивация Когда надо выбрать много данных один раз и потом немного доагрегировать в разных плоскостях и пофильтровать, например для графиков или дашбордах данных из bigquery.\nПример использования: https://samples-demo.devision.io/page?p=4959\u0026amp;a=35\nПринципиально все достаточно просто - у вас есть DataResult и вы хотите его перегруппировать. Для этого сперва получаем данные, например sql запросом в скрипте res, а потом в отдельном meta/js скрипте делаем вызов DataTransformService.pivot с необходимыми параметрами.\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;res\u0026quot; entity-id=\u0026quot;2629\u0026quot; label=\u0026quot;Исходные данные. Можно не выводить на интерфейс, тут просто для понимания исходных данных\u0026quot; order=\u0026quot;10\u0026quot;\u0026gt; SELECT ... json_build_object( 'pager', json_build_object('total', count(*) over()), 'headers', json_build_array( ... ) ) as table_props_field FROM \u0026quot;public\u0026quot;.\u0026quot;employee\u0026quot; \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;res_rows_cols\u0026quot; span=\u0026quot;6\u0026quot; label=\u0026quot;Rows and Cols\u0026quot; order=\u0026quot;20\u0026quot;\u0026gt; function main(pvm, DataTransformService) { return DataTransformService.pivot(pvm.data.res, { rows: [\u0026quot;isActive\u0026quot;], cols: [\u0026quot;first_name\u0026quot;], metrics: [ {expression: \u0026quot;salary\u0026quot;}, ], dimensionFilterClauses: [ { operator: \u0026quot;AND\u0026quot;, filters: [ { dimensionName: \u0026quot;name\u0026quot;, operator: \u0026quot;IN_LIST\u0026quot;, expressions: [\u0026quot;Юрий Гагарин\u0026quot;, \u0026quot;Дмитрий Медведев\u0026quot;, \u0026quot;Дмитрий Менделеев\u0026quot;] } ] } ] }); } \u0026lt;/script\u0026gt;  PivotConfig { // то, что группируется по строкам \u0026quot;rows\u0026quot;: [\u0026quot;name\u0026quot;], // группировка по колонкам. (Не обязательно) \u0026quot;cols\u0026quot;: [\u0026quot;isActive\u0026quot;], // ограничение по строкам после группировки (Не обязательно). По умолчанию 0 - не заадано \u0026quot;limit\u0026quot;: 10, // Можно группировать существующие поля и описывать расчетные // За основу взято https://developers.google.com/analytics/devguides/reporting/core/v4/rest/v4/reports/batchGet#Metric \u0026quot;metrics\u0026quot;: [ {\u0026quot;expression\u0026quot;: \u0026quot;salary\u0026quot;}, {\u0026quot;expression\u0026quot;: \u0026quot;bigDecimal\u0026quot;}, {\u0026quot;expression\u0026quot;: \u0026quot;[metric:salary] / 10\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;new_salary\u0026quot;}, {\u0026quot;expression\u0026quot;: \u0026quot;[metric:salary] * [metric:salary] * [metric:organizationId]\u0026quot;, \u0026quot;alias\u0026quot;: \u0026quot;multi_mul\u0026quot;}, ], // Сортировка (Не обязательно) // Идет после группировки \u0026quot;orderBys\u0026quot;: [ {\u0026quot;fieldName\u0026quot;: \u0026quot;salary\u0026quot;, \u0026quot;sortOrder\u0026quot;: \u0026quot;DESC\u0026quot;} ], // ограничение по строкам после группировки (Не обязательно). По умолчанию false \u0026quot;includeEmptyRows\u0026quot;: false, \u0026quot;dimensionFilterClauses\u0026quot;: [ { // Обязательно. Пока поддерживается только AND \u0026quot;operator\u0026quot;: \u0026quot;AND\u0026quot;, \u0026quot;filters\u0026quot;: [ { // Делает условие обратным (Не обязательно) // По умолчанию - false \u0026quot;not\u0026quot;: false, // поле для фильров \u0026quot;dimensionName\u0026quot;: \u0026quot;name\u0026quot;, // Поддерживаются операторы IS_NULL, EXACT, PARTIAL, IN_LIST, BEGINS_WITH, ENDS_WITH // за основу взят https://developers.google.com/analytics/devguides/reporting/core/v4/rest/v4/reports/batchGet#Operator // По умолчанию EXACT \u0026quot;operator\u0026quot;: \u0026quot;IN_LIST\u0026quot;, // Строки и регулярные выражения для сопоставления. // В целях сравнения используется только первое значение списка (кроме случаев, когда применяется оператор IN_LIST). // Если применяется оператор IN_LIST, фильтрация параметров выполняется по всему списку фильтров, согласно описанию оператора IN_LIST. // Для IS_NULL передавать не обязательно \u0026quot;expresions\u0026quot;: [\u0026quot;Юрий Гагарин\u0026quot;, \u0026quot;Дмитрий Медведев\u0026quot;, \u0026quot;Дмитрий Менделеев\u0026quot;] } ] } ] }  "
},
{
	"uri": "https://developers.devision.io/meta/integrations/google_analytics/",
	"title": "Google Analytics",
	"tags": [],
	"description": "",
	"content": " Google Analytics уже глубоко интегрирован в платформу и многие нужные вам события с интерфейса и backend зачастую автоматически будут поступать в GA.\nАвтоматически собираемые действия  Открытия страниц Открытие модальных окон (в т.ч. sidenav) Регистрация События ADD из ObjectLogService Клик на кнопку добавление объекта в me-select Выбор пункта меню в me-input type=menu-btn  Отправка событий через Measurement Protocol В скриптах meta/js или meta/sql (с помощью шаблонизатора) вы можете отправлять нужные вам события в GA.\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;editGroup\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; function main(env, log, vm, pvm, GaService) { GaService.eventTrack('GCS', 'InviteForm'); // или GaService.eventTrack('GCS', 'InviteForm', 'open'); // или GaService.eventTrack('GCS', 'InviteForm', 'open', 42); } \u0026lt;/script\u0026gt;  Measurement Protocol Вы можете отправлять не только события, но тогда следует ознакомится с доступными в протоколе параметрами Например, чтобы отправить transaction id нужно\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;res\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; function main(GaService) { GaService.send({ \u0026quot;ti\u0026quot;: \u0026quot;42\u0026quot; }); } \u0026lt;/script\u0026gt;  Описание протокола https://developers.google.com/analytics/devguides/collection/protocol/v1/parameters?hl=en\n"
},
{
	"uri": "https://developers.devision.io/meta/work_with_data/google_sheets/",
	"title": "Google Sheets",
	"tags": [],
	"description": "",
	"content": " Мотивация Иногда пользователи хотят управлять отчетами через интеграцию с Google Sheets\nДокументация по query language: https://developers.google.com/chart/interactive/docs/querylanguage#language-clauses\nАдминистративные настройки сервера Для того, чтобы это заработало в основном конфигурационном файле меты должен быть заполнен блок googleShareAccount, где нужно вписать google service account настройки из формата json в формате yaml. После указания ваши пользователи смогут расшаривать файлы на ваш сервисный аккаунт и мета будет получать к ним доступ.\nнапример у нас это аккаунт - robot-valera@devision-io.iam.gserviceaccount.com\nЧто нужно сделать Вы должны использовать БД \u0026ldquo;gsheet\u0026rdquo;. В ShardKey укажите id документа, через решетку имя листа, если имя листа не указано, то скорее всго будет взят первый созданный лист gid=0. Будте аккуратны, так как МЕТА не гарантирует, что google не изменит api и не станет отдавать другой лист по умолчанию.\nНе забудьте, что пользователь должен либо сделать документ публичным, либо расшарить его на ваш сервисный аккаунт.\nОграничения ${pager}, ${sort} и комментирование строк как в БД не работают в скриптах google sheet\nЧастые проблемы Дата в мете выводится неверно Примените формат даты в google sheet к нужной колонке\nВ мете пустота вместо числа из ячейки или число нет то, хотя в google sheet все ок Примените форма числа к нужным ячейкам и замените точки на запятые, если у у вас ru локаль\nПример Получение всего контента листа с названием \u0026ldquo;Мой лист\u0026rdquo;\n\u0026lt;script id=\u0026quot;res\u0026quot; type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;gsheet\u0026quot; shard-key=\u0026quot;1Wn2mET2s5hkhMvEJHXAXJu20wahJFgf11HxXYfBos8c#Мой лист\u0026quot;\u0026gt; select * \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/guides/validation/",
	"title": "Валидация",
	"tags": [],
	"description": "",
	"content": " Простые валидаторы  min (number): для чисел - минимальное число, для строк - минимальная длина строки\n max (number): для чисел - максимальное число, для строк - максимальная длина строки\n required (boolean): для любых элементов, означает обязательность заполнения\n pattern (string): регулярное выражение для текстовых инпутов\n  Пример:\n{ id: \u0026quot;alias\u0026quot;, span: 6, label: \u0026quot;Альяс\u0026quot;, help: \u0026quot;Текстовая подпись\u0026quot;, name: \u0026quot;me-input\u0026quot;, attrs: { type: \u0026quot;text\u0026quot;, pattern: \u0026quot;[0-9a-z_]+\u0026quot;, min: 0, max: 100 }, }  Серверные валидаторы Управляются через параметр refPvmValidator, который является полным аналогом refPvmData, только загружает результаты валидации\n{ id: \u0026quot;name\u0026quot;, label: \u0026quot;Название\u0026quot;, span: 12, name: \u0026quot;me-input\u0026quot;, refPvmValidator: {id: \u0026quot;name_validator\u0026quot;} }  Вызываемый скрипт name_validator не обязательно должен иметь именно такое назывние.\nДолжен быть описан на странице формы или объявлен на спец. странице с ролью Валидаторы и, в таком случае, указан в форме так: refPvmValidator: {id: \u0026quot;#entity.name_validator\u0026quot;}.\n\u0026lt;script db-alias=\u0026quot;meta_samples\u0026quot; depends=\u0026quot;name\u0026quot; id=\u0026quot;name_validator\u0026quot; type=\u0026quot;meta/sql\u0026quot;\u0026gt; SELECT 'name_validator_unique' as id, 'Имя уже используется' as name FROM public.example_entity WHERE name = :env.sp.name LIMIT 1 \u0026lt;/script\u0026gt;  Валидация для обычных форм Приведена часть страницы для примера:\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;editCard\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; function main(vm, pvm, env) { ..... vm.elems = [ { id: \u0026quot;name\u0026quot;, label: \u0026quot;Название\u0026quot;, span: 12, name: \u0026quot;me-input\u0026quot;, // Валидатор при это объявлен на уровне entity на странице \u0026quot;Валидаторы\u0026quot; с соответствующей ролью страницы // Таким образом мы настраиваем валидатор на поле. refPvmValidator: {id: \u0026quot;#entity.name_validator\u0026quot;}, \u0026lt;--- настройки серверного валидатора. Префикс \u0026quot;#entity.\u0026quot; указывает на то, что скрипт name_validator описан на странице с ролью \u0026quot;Валидаторы\u0026quot; в текущей entity attrs: { required: true, \u0026lt;--- обычные валидаторы min: 2, \u0026lt;--- обычные валидаторы max: 30 \u0026lt;--- обычные валидаторы } }, ..... ]; } \u0026lt;/script\u0026gt;  Пример 1\nПример 2\nВалидация смарт-форм Смарт-формы являются частью платформы и так же нуждаются в простой настройке валидаторов.\nНастройка делается в yaml-файле нужной вам entity через указание lego_elem как для обычных валидаторов типа min, max и пр., так и для серверной валидации через refPvmValidator.\nДля примера приведена только часть полей:\nid: 'example_entity' name: Пример db_alias: meta_samples schema: public table: example_entity i18n: true fields: - name: id db_type: uuid is_primary: true is_hidden: true - name: name db_type: text is_title: true is_required: true display_name: Название i18n: true lego_elem: refPvmValidator: id: '#entity.name_validator' \u0026lt;--- настройки серверного валидатора. Префикс \u0026quot;#entity.\u0026quot; указывает на то, что скрипт name_validator описан на странице с ролью \u0026quot;Валидаторы\u0026quot; в текущей entity .... - name: cost db_type: numeric i18n: true display_name: Стоимость lego_elem: attrs: max: 2000 \u0026lt;------ настройка обычных валидаторов  Пример 1\n"
},
{
	"uri": "https://developers.devision.io/meta/guides/entity_listeners/",
	"title": "Отслеживание изменений сущностей",
	"tags": [],
	"description": "",
	"content": " Мотивация На случай, если при сохранении формы в модальном окне нужно обновить инпуты в родительской форме или обновить список объектов сущности, если вы изменили или добавили новую.\nСлучай 1 Бывают случаи, когда у вас есть форма создания/редактирования объекта и в ней есть инпут с выбором объекта другого типа. Например: вы добавляете товар и выбираете его категорию, а если категории нет, то вы хотите прямо здесь ее создать.\nВ этом случае у инпута выбора категории нужно добавить кнопку создания объекта через \u0026ldquo;addObjectButton\u0026rdquo; и добавить прослушку событий по объектам указаного типа через \u0026ldquo;listen\u0026rdquo; чтобы после создания объект появлвлся в выпадающем списке.\nНа форме, где у вас будет инпут обязательно добавьте секции: - attrs.addObjectButton - listen\n{ \u0026quot;id\u0026quot;: \u0026quot;mylego\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;me-lego\u0026quot;, \u0026quot;elems\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;ex_access_id\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;me-input\u0026quot;, \u0026quot;entityId\u0026quot;: 2830, \u0026quot;attrs\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;select\u0026quot;, // говорим, что у нас выпадающий селектбокс \u0026quot;required\u0026quot;: true, \u0026quot;addObjectButton\u0026quot;: { // говорим, что у нас есть кнопка создания объектов указанного entity_id \u0026quot;env\u0026quot;: { \u0026quot;sp\u0026quot;: { // если вам нужно перезать что-то на страницу создания объекта, при нажатии на кнопку создания объекта сделайте это тут \u0026quot;obj\u0026quot;: { \u0026quot;mode\u0026quot;: \u0026quot;feed\u0026quot;, \u0026quot;ex_system_id\u0026quot;: \u0026quot;google_adwords\u0026quot; } } }, \u0026quot;title\u0026quot;: \u0026quot;Подключить аккаунт\u0026quot; } }, \u0026quot;listen\u0026quot;: [ { // Тут мы гвоорим, что хотим отслеживать изменения сущности при операция добавление и изменения \u0026quot;code\u0026quot;: [ \u0026quot;ADD\u0026quot;, \u0026quot;SET\u0026quot; ], \u0026quot;entityId\u0026quot;: 2830, \u0026quot;refreshRefPvmData\u0026quot;: {}, // Говорим, что хотим обновлять список опшенов me-input \u0026quot;objectId\u0026quot;: 0 } ], // Это просто для полноценности примера \u0026quot;label\u0026quot;: \u0026quot;Укажите аккаунт для получения данных или добавьте новый\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;$metaql\u0026quot;, \u0026quot;sp\u0026quot;: { // Кстати, это хороший пример использования защищенного языка запросов к данным. Это не полноценный SQL // Тут работает общий ACL и нет ничего, кроме простых SELECT запросов \u0026quot;dbQuery\u0026quot;: { \u0026quot;command\u0026quot;: \u0026quot;SELECT id,name FROM meta.ex_access WHERE ex_system_id = 'google_adwords' and user_status='ENABLED' ORDER BY name\u0026quot; } } } } ] }  Случай 2 Или у вас есть список объектов какой-либо сущности в таблице и при редактировании или добавлении объекта в модальном окне вы хотите перезагружать данные таблицы\nДля таблицы добавляется атрибут listen\n code: укажите на какие коды вы подписываетесь ADD, SET, REMOVE entityId: укажите id сущности, которую будете прослушивать reload: говорит, что надо сделать reload страницы при получении уведомления об изменении данных\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; order=\u0026quot;400\u0026quot; id=\u0026quot;res\u0026quot; entity-id=\u0026quot;2830\u0026quot; db-alias=\u0026quot;meta\u0026quot; entity-id=\u0026quot;ex_system\u0026quot; listen='[{\u0026quot;code\u0026quot;: [\u0026quot;ADD\u0026quot;, \u0026quot;REMOVE\u0026quot;, \u0026quot;SET\u0026quot;], \u0026quot;reload\u0026quot;:{},\u0026quot;entityId\u0026quot;: \u0026quot;2830\u0026quot;}]' ...   На стороне модального окна На стороне страницы создания/редактирования объекта сущности нужно обязательно залогировать добавление или изменение вызовом ObjectLogService.logValue. Эти данные пойдут в лог и смогут быть использованы для подписки на события через артрибут listen\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;save\u0026quot;\u0026gt; function main(pvm, vm, env, ObjectLogService) { var isNew = false; var objectId = env.object_id; pvm.toInitialState(); pvm.closeModal(); pvm.changeState('default'); pvm.popup = {level: \u0026quot;success\u0026quot;, message: \u0026quot;${i18n('common.saveSuccess')}\u0026quot;}; ObjectLogService.logValue(env.entityId, objectId, isNew ? 'ADD' : 'SET', env.sp.obj); } \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/guides/entity_handlers/",
	"title": "Обработчики событий сущностей",
	"tags": [],
	"description": "",
	"content": " Мотивация Часто хочется иметь middleware функцию проверки доступа к конкретному объекту на карточке объекта для того, чтобы не делать проверку досупа на каждой странице сущности.\nЧтобы сделать обработчик вам нужно:\n Сделать страницы с ролью \u0026ldquo;Обработчики событий сущности\u0026rdquo;\n Сделать скрипт cо state и id равному типу обработчика.\n  Например:\n\u0026lt;script type=\u0026quot;...\u0026quot; id=\u0026quot;check_access\u0026quot; state=\u0026quot;check_access\u0026quot;\u0026gt; SELECT (CASE WHEN author_user_id = :env.userId THEN 200 ELSE 403 END) as status_code FROM pubic.myobject WHERE id = :env.objectId::text LIMIT 1 \u0026lt;/script\u0026gt;  Обратите внимание, что на один state вы можете сделать несколько скриптов, которые выполнятся последовательно согласно их положению на странице. Это может быть удобно, когда вам надо что-то сделать в разных бд или sql + javascript. В этом случае скрипт с id равному типу обработчика должен стоять последним.\nНапример:\n\u0026lt;script type=\u0026quot;...\u0026quot; id=\u0026quot;get_anything\u0026quot; state=\u0026quot;check_access\u0026quot;\u0026gt; SELECT myvar FROM ... LIMIT 1 \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;...\u0026quot; id=\u0026quot;check_access\u0026quot; state=\u0026quot;check_access\u0026quot;\u0026gt; SELECT ... FROM ... WHERE id IN ( :pvm.data.get_anything.rows[0].myvar ) \u0026lt;/script\u0026gt;  Обработчик: check_access Используется для проверки доступа к конкретному объекту сущности. Например в вашем приложении есть список клиентов, но не каждому пользователю доступен каждый клиент. В этом случае удобно будет сделать проверку на карточке один раз и не проверять на каждой странице.\nПроверка на карточке объекта не отменяет отдельные проверки на списке объектов. Пока что в Мете нет способа быстро и просто проверять доступность данных на списках через встроенные механизмы. Мы рекомендуем делать хранимые процедуры базы данных для быстрой проверки доступа.  Метод может вернуть всего одну строку с параметром \u0026ldquo;status_code\u0026rdquo; (тип int) или вернуть ноль строк. Для простоты коды соответсвуют HTTP кодам состояния\nНа текущий момент реализована обработка этих кодов:\n 200 - доступ есть 403 - доступ запрещен 404 или если метод не вернет ни одной строки это будет - отсутствие обхекта  Если будет возвращен иной код состояния это будет воспринято как ошибка страницы и дальнейшая загрузка объекта будет преравана.\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db=\u0026quot;adplatform\u0026quot; id=\u0026quot;check_access\u0026quot; states=\u0026quot;check_access, default\u0026quot;\u0026gt; SELECT (CASE WHEN client.id IN (SELECT client_id FROM get_user_clients(:env.userId)) THEN 200 ELSE 403 END) as status_code from client where client.id = :env.objectId::bigint limit 1 \u0026lt;/script\u0026gt;  Обработчик: breadcrumbs Используется для вывода более прокаченных хлебных крошек в навигации.\nСсылка на страницу родитеслького объекта Например у вас есть структура. Клиенты -\u0026gt; Клиент -\u0026gt; Список алгоритмов клиента -\u0026gt; Алгоритм. До появления этого функционала не было никакой возможности построить ссылку на список алгоритмов клиента в навигационном разделе, будучи на карточке алгоритма.\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db=\u0026quot;adplatform\u0026quot; id=\u0026quot;breadcrumbs\u0026quot; states=\u0026quot;breadcrumbs, default\u0026quot;\u0026gt; SELECT json_build_object('id', client.id, 'name', client.name, 'entityId', '190', 'pageId', '5282') as entity_link_field_parent_object from algorithm left join client ON client.id = algorithm.client_id where algorithm.id=:env.objectId::bigint \u0026lt;/script\u0026gt;  Ссылка на страницу приложений (не карточку) Работает приоритетнее, чем object_list_base_page_id, хотя делает тоже самое, но может использоваться для динамического рассчета page_id. Так же иногда удобнее, чем object_list_base_page_id так как не является глобальной настройкой над всем приложениями.\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db=\u0026quot;adplatform\u0026quot; id=\u0026quot;breadcrumbs\u0026quot; state=\u0026quot;breadcrumbs, default\u0026quot;\u0026gt; SELECT json_build_object('pageId', 'app_clients') as parent_page from client WHERE client.id = :env.objectId::bigint \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/guides/data_types/",
	"title": "Типы данных",
	"tags": [],
	"description": "",
	"content": " Основные    Тип Описание     UNKNOWN Неизвестный тип, часто бывает текстовым в действительности. Но иногда БД не может отдать тип и мы не рискуем предполагать. В этих случаях используйте type cast средствами БД   BOOLEAN Булев тип (true/false)   TEXT Текстовое поле без существенных ограничений длины.   INT 32х битное целое число. Диапазон от -2,147,483,648 до +2,147,483,647   LONG 64х битное целое число. Диапазон от -9,223,372,036,854,775,808 до +9,223,372,036,854,775,807   DECIMAL Вещественное число с указанной точностью. Тип DECIMAL позволяет хранить числа с очень большим количеством цифр. Он особенно рекомендуется для хранения денежных сумм и других величин, где важна точность.   DATE Дата по часовому поясу сервера   TIME Время (без даты). Очень редкий тип   DATETIME Дата и время по часовому поясу сервера. Рекомендуется использовать в БД тип данных с указанимаем часового пояса. Для Postgres timestamptz   RECORD Означает, что колонка содержит вложенную типизированную структуру данных   INTERVAL Целочисленное значение секундах   PERCENT Число с плавающей точкой для хранения процентов, с базисом 1. Что значит, что 50% = 0.5    Спицифические    Тип Описание     ARRAY Обычно не указывается, но возвращается, если например вы сделали операцию ARRAY_AGG. При этом тип значений массива неизвестен. Лучше использовать RECORD структуры   I18N Значение ячейки такой колонки будет пропущено через translateService.i18n для попытки перевода. Применяется для колонок с префиксом i18n_field_ в названии.   HTML Указывает формат рендеринга html-разметки (данные в виде строки). Применяется для колонок с префиксом html_field_ в названии.   HREF Указывает формат данных для отрисовки ссылки (данные в виде json). Применяется для колонок с префиксом href_field_ в названии.   ENTITY_LINK Указывает формат данных для отрисовки ссылки на сущность (данные в виде json). Применяется для колонок с префиксом entity_link_field_ в названии.   JSON Применяется для колонок с префиксом json_field_ в названии.   MARKDOWN Значение ячейки такой колонки будет пропущено через markdownService.render шаблонизации в html Применяется для колонок с префиксом markdown_field_ в названии.    Deprecated    Тип Описание     JSON_LABEL Применяется для колонок с префиксом json_label_ в названии.   JSON_GRAPH Применяется для колонок с префиксом json_graph_ в названии.   JSON_TREE_LABEL Применяется для колонок с префиксом json_tree_label_ в названии.    "
},
{
	"uri": "https://developers.devision.io/meta/compoments/oauth/",
	"title": "OAuth",
	"tags": [],
	"description": "",
	"content": " Области действия для API (Scopes) Придумывая скоупы для сервисов идитие от общего к частному и не создавайте больше необходимого. Скорее всего достаточно будет начать со скоупа полного доступа к сервису, потом, если и когда понадобится - до ьавить доступ только на чтение.\n"
},
{
	"uri": "https://developers.devision.io/meta/compoments/event_bus/",
	"title": "Шина событий",
	"tags": [],
	"description": "",
	"content": " Мотивация Нужно стремится делать компоненты системы масимально независимыми от бизнес-логики.\nИдеально, если при сохранении чего-то смотреть изменившиеся поля и понимать что именно надо выполнить по бизнес-процессу, если, например изменился только статус объекта, однако пока что это невозможно. Однако мы хотели сделать возможность подписываться на изменения объектов, чтобы не добавлять логику оповещения внутренних подсистем предприятия прямо в код страниц META.\nПример: на карточке клиента при сохранении списка главных пользователей клиента надо записывать изменения в сторонюю CRM. В простейшем случае все тривиально - в код страницы вставляется вызов апи CRM, например даже через какое-то наше внутрее API. Однако список таких систем может расти и вам просто сложно будет за этим всем следить, а так же параллелить и перезапускать при недостуности внешних API, код будет ухудшаться и не будет соблюдаться принцип единой ответственности (SRP).\nКроме того, если вы или с вами будут делиться модулями меты, вы врядли захотите менять эти страницы, чтобы уведомить какие-то части своей подсистемы.\nКак работает На основе Starter в качестве backend для распределенного запуска скриптов. Он же обеспечивает перезапуск при падениях, ограничение очереди выполнения, логи и пр. вещи нужные для обработки очередей\nMETA Страницы В коде страниц редактирования карточек объектов в принципе вседа есть похожий код, который занимается журналированием изменений:\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;save\u0026quot;\u0026gt; function main(pvm, vm, env, ObjectLogService) { // тут обычное сохранение вашего объекта или списка объектов // Это стандартная запись в журнал изменений по объекту ObjectLogService.logValue(env.entityId, objectId, isNew ? 'ADD' : 'SET', env.sp.obj); // или с пятым параметром, который укажет на некую \u0026quot;форму\u0026quot;, которая менала объект // например тут придумано название main_user_list, которое именно у нас в приложении будет означать форму со списоком главных пользователей ObjectLogService.logValue(env.entityId, objectId, isNew ? 'ADD' : 'SET', env.sp.obj, 'main_user_list'); } \u0026lt;/script\u0026gt;  Dispatchers Содержится в параметре dispatcher\nБудет использоваться для шины событий как клиент, который продуцирует полезную работу: запускает фоновые процессы, записыват логи, генерирует события в шину\nПримеры:\n meta.{META_APP_ALIAS} - мета-приложение appscript.{SERVICE_ID} - фоновый скрипт (включает в сещя обработчики шины событий) apiservice.{SERVICE_ID} - http апи сервисы  Python worker (Listener) from metasdk import MetaApp from metasdk.event_bus import Event META = MetaApp() log = META.log # в декораторе вы долэны указать на какие типу уведомлений подписываетесь и начать обработку события @META.event_bus.listener(entity_id=\u0026quot;2830\u0026quot;, code=[\u0026quot;ADD\u0026quot;, \u0026quot;SET\u0026quot;], form_pattern=[\u0026quot;*\u0026quot;], dispatcher_pattern=[\u0026quot;meta.garpun_feeds\u0026quot;]) def on_upsert_ex_access(event: Event): print(u\u0026quot;on_upsert_ex_access = %s\u0026quot; % str(event)) print(u\u0026quot;event.value = %s\u0026quot; % str(event.value)) # для получения value нужено делать receive_value=True, но не делайте это всегда, часто это не нужно, но создает большую доп. нагрузку print(u\u0026quot;event.object_id = %s\u0026quot; % str(event.object_id)) import time print(\u0026quot;sleep...\u0026quot;) time.sleep(60) # Это пример для тестового локального запуска, прямо как в типичных фоновых скриптах META.worker.debug_tasks = [{ \u0026quot;data\u0026quot;: { \u0026quot;event\u0026quot;: { \u0026quot;userId\u0026quot;: 10191, \u0026quot;entityId\u0026quot;: 2830, \u0026quot;objectId\u0026quot;: \u0026quot;42\u0026quot;, \u0026quot;code\u0026quot;: \u0026quot;SET\u0026quot;, \u0026quot;form\u0026quot;: \u0026quot;test\u0026quot;, \u0026quot;value\u0026quot;: { \u0026quot;a\u0026quot;: 1 } } } }] # Бойлерплейт, который запускает обработку @META.worker.single_task def main(task): META.event_bus.accept(task)  Python Client Если вам надо спровоцировать запись в журнал с записью в Шину Событий. Вы должны вызвать журналирование, а в app-content вы должны иметь настроенные обработчики (listeners)\nfrom metasdk import MetaApp META = MetaApp() META.ObjectLogService.log({ \u0026quot;userId\u0026quot;: 10191, \u0026quot;entityId\u0026quot;: 2671, \u0026quot;objectId\u0026quot;: 53, \u0026quot;code\u0026quot;: \u0026quot;SET\u0026quot;, \u0026quot;form\u0026quot;: \u0026quot;my_form\u0026quot;, # optional \u0026quot;value\u0026quot;: { # optional \u0026quot;foo\u0026quot;: \u0026quot;bar\u0026quot;, \u0026quot;subFoo\u0026quot;: { \u0026quot;foo2\u0026quot;: [1, 2, 3] } } })  Ограничения  Звездочка в паттерне формы \u0026ldquo;*\u0026rdquo; может стоять или в начале или в конце, но НЕ в середине выражения Если нет подписчиков события, событие будет записано в журнал, но не уйдет в Starter По-умолчанию value лога не прокидывается в таски для шины. Для того, чтобы получать его делайте receive_value=True  Отказоустойчивость Мы стараемся делать все надежно, однако все ломается (например падение сети или выключение электричества) и событие может не уйти и вы должны иметь механизмы перепроверки. Желательно подумать о них примо при проектировании своей подсистемы. Работать они могут сильно реже - напирмер раз в час перепроеряют, что все сработало как надо и если что-то не так - делают нужные задачи. Мы будем улучшать надежность Шины, однако все же надо помнить, что только вы знаете как правильно ореагировать на серьезные ошибки в вашем продукте.\nROADMAP  попытаться очень быстро обрабатывать события с минимальными накладными расходами на запуск питона, например убрать оповещение юзеров и какие-то уведомления туда же автоматические уведомления popup от ObjectLogService через PubSub понятные ограничения обработки очередей event-роутеров  "
},
{
	"uri": "https://developers.devision.io/meta/samples/",
	"title": "Примеры",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/compoments/",
	"title": "Компоненты",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/compoments/media/",
	"title": "Медиаданные",
	"tags": [],
	"description": "",
	"content": " Что такое и где используются? Контент любых файлов как правило плохо хранить прямо в базе данных, так как это вызывает дополнительную нагрузку на хранение, репликацию, очистку, vacuum (для postgres), выборку данных (если у вас БД не с колоночным хранением).\nПоэтому в мете есть специальное API для работы с файлами. По сути вся работа сводится к тому, чтобы на интерфейсе через форму или на сервере через metasdk загрузить данные, а потом на интерфейсе их показать или получить на бекенде.\nМета может хранить данные просто в расшаренной папке, но рекомендуется настраивать S3 совместимое хранилище через общий конфигурационный файл платформы.\nЗагрузка данных Для загрузки данных через интерфейс используйте компонент me-input type=attach\nЕсли вам нужно загрузить данные программно, то используйте метод upload в MediaService в python metasdk.\nПри загрузке файлов желательно, но необязательно устанавливать значения для entityId и objectId. Это нужно, чтобы семантически привязать медиафайл к какому-либо объекту меты. Например, установив entityId=190 и objectId=42, вы привяжете загружаемый медиафайл к сущности Клиент с primary key = 42.\nДля оптимизации хранения очень полезно устанавливать ttl хранения для временных данных и результатов, которые можно автоматически стирать через время. Если его не устанавливать, то хранение будет вечным, что может негативно сказаться на стоимости вашего решения.\nХранение Таблица для хранения: meta.media\nДанные записываются ядром меты, не рекомендуется делать вставку данных в таблицу в ручную, так как это может негативно повлиять на систему.\nПри этом можно делать UPDATE в поле info, чтобы далее с ним работать в режиме чтения. Это удобно, если вам нужно после загрузки файла обработать его через Шину сообщений и сложить результат в таблицу, чтобы не размазывать данные между разными таблицами и получать эти данные даже через metasdk в MediaService.\nmeta_db.update( \u0026quot;\u0026quot;\u0026quot; UPDATE meta.media SET info = jsonb_strip_nulls(info || :check_res::jsonb) WHERE id=:media_id::uuid \u0026quot;\u0026quot;\u0026quot;, {\u0026quot;media_id\u0026quot;: media_id, \u0026quot;check_res\u0026quot;: json.dumps(check_res)}, )  Markdown В полях типа MARKDOWN или при использовании MarkdownService вы можете достаточно просто сгенерировать полную ссылку на скачивание или просмотр медиафайла.\n [~media_view:41d1d840-5055-4852-84d1-7edd8497e41a] - ссылка на просмотр медиафайла [~media_download:41d1d840-5055-4852-84d1-7edd8497e41a] - ссылка на загрузку медиафайла  В этих случаях сгенерируется абсолютная ссылка с каноническим именем медиафайла. Это очень удобно при работе с рассылками через сервис Feeds.\nРабота через metasdk Ознакомьтесь с основным описанием\nЛокальная разработка Когда вы разрабатываете фичу на локальной мете \u0026ldquo;http://localhost:9999\u0026quot;, прикладываемые там файлы так же как и в production среде записываются в БД в таблицу meta.media, но складываются к вам на локальный диск.\nЕсли в скриптах вам надо с ними поработать, то надо перенастроить SDK на работу с локальной метой:\nMETA = MetaApp(meta_url=\u0026quot;http://localhost:9999\u0026quot;)  Важно и стоит помнить, что если вы прикладывали файл в локальной мете, то и sdk должна работать с локальной метой. А если файл прикладывался в продакшене, то и sdk должна работать с продакшн метой.\nВ принципе этот подход применим и при других изменениях, которые есть только локально у вас на компьютере.\nПример Простой пример кода, который загружает файл в хранилище и скачивает его.\nimport os import shutil from tempfile import NamedTemporaryFile from metasdk import MetaApp META = MetaApp() log = META.log # Загрузка файла может происходить через API как показано ниже или через интерфейс # как в примере http://localhost:9999/page?p=4201\u0026amp;a=35 # Сути дела это не поменяет, в итоге файл попадает в хранилище, а также получает запись в таблице meta.media upload_file = open('myfile.yml', 'rb') upload_result = META.MediaService.upload(upload_file, { \u0026quot;isPrivate\u0026quot;: True, # Файл будет доступен только для пользователя, работающего с api \u0026quot;ttlInSec\u0026quot;: 9999, # Обязательно для временных файлов. Кол-во секунд через которые мета автоматически удалит файл \u0026quot;entityId\u0026quot;: 2770, \u0026quot;objectId\u0026quot;: \u0026quot;114aecf5-04f1-44fa-8ad1-842b7f31a2df\u0026quot;, \u0026quot;info\u0026quot;: {\u0026quot;test\u0026quot;: True} # Метаданные файла }) print(\u0026quot;upload_result = %s\u0026quot; % str(upload_result)) media_id = upload_result['id'] info_response = META.MediaService.info(media_id) print(\u0026quot;info_response = %s\u0026quot; % str(info_response)) # Для больших файлов важно скачивать их as_stream, чтобы экономить память на сервере и на клиенте dwn_response = META.MediaService.download(media_id, as_stream=True) print(\u0026quot;response = %s\u0026quot; % str(dwn_response)) # мета старается сжимать ответы через gzip, поэтому # для текстовых файлов часто очень важно устанавливать decode_content=True # например для mime application/json плохо скачиваются # response.raw.decode_content = True dwn_response.raw.decode_content = True source_file = NamedTemporaryFile(delete=False) print(\u0026quot;source_file.name = %s\u0026quot; % str(source_file.name)) with open(source_file.name, \u0026quot;wb\u0026quot;) as out_file: shutil.copyfileobj(dwn_response.raw, out_file)  Работа от лица пользователя Иногда надо работать с файлами от имени пользователя, например если пользователь заказал фоновую обработку. В этом случае надо устанавливать, а потом убирать параметр META.auth_user_id\ntry: META.auth_user_id = {{NEED_USER_ID}} upload_file = open('/Users/arturgspb/PycharmProjects/metaappscriptworkers/1.yml', 'rb') upload_result = META.MediaService.upload(upload_file, { \u0026quot;isPrivate\u0026quot;: True, # Файл будет доступен только для пользователя, работающего с api \u0026quot;ttlInSec\u0026quot;: 9999, # Обязательно для временных файлов. Кол-во секунд через которые мета автоматически удалит файл \u0026quot;entityId\u0026quot;: 2770, \u0026quot;objectId\u0026quot;: \u0026quot;114aecf5-04f1-44fa-8ad1-842b7f31a2df\u0026quot;, \u0026quot;info\u0026quot;: {\u0026quot;test\u0026quot;: True} # Метаданные файла }) print(\u0026quot;upload_result = %s\u0026quot; % str(upload_result)) finally: META.auth_user_id = None  Пример Пример показывает с чего можно начать, если у вас есть задача загрузить в интерфейсе файл через форму и отправить его на обработку в фоновый скрипт.\nСтраница в интерфейсе Рисует форму, куда в данном примере прикладывается только файл, но как и любая lego-форма она может содержать любые другие доступные контролы.\n\u0026lt;elem span=\u0026quot;12\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;form name=\u0026quot;editGroupForm\u0026quot; ng-submit=\u0026quot;changeState('run_parsing', {obj:env.sp.obj})\u0026quot;\u0026gt; \u0026lt;me-lego elems=\u0026quot;editGroup.legoForm.elems\u0026quot; output=\u0026quot;env.sp.obj\u0026quot;\u0026gt;\u0026lt;/me-lego\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;editGroup\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; function main(env, log, vm, pvm) { vm.legoForm = { elems: [ { id: \u0026quot;input_file\u0026quot;, name: \u0026quot;me-input\u0026quot;, label: \u0026quot;Файл сюда\u0026quot;, span: 4, attrs: { pattern: 'application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,text/csv', type: \u0026quot;attach\u0026quot;, required: true, info: { additionalInfo: {ttlInSec:1209600} } } }, { id: \u0026quot;smb\u0026quot;, name: \u0026quot;me-submit\u0026quot;, attrs: { value: 'Запустить задачу' } }, ] }; } \u0026lt;/script\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; internal states=\u0026quot;run_parsing\u0026quot;\u0026gt; SELECT * FROM api.meta_starter_submit_task('your_parser_script_name', jsonb_build_object( 'media_id', :env.sp.obj.input_file , 'user_id', :env.userId )) \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; states=\u0026quot;run_parsing\u0026quot;\u0026gt; function main(pvm) { pvm.changeState('waiting_parsing'); } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; id=\u0026quot;waiting_cnt\u0026quot; states=\u0026quot;waiting_parsing\u0026quot; elem=\u0026quot;hidden\u0026quot;\u0026gt; SELECT COUNT(*) as cnt FROM job.task WHERE service_id='your_parser_script_name' AND status IN ('NEW', 'PROCESSING') \u0026lt;/script\u0026gt; \u0026lt;elem states=\u0026quot;waiting_parsing\u0026quot; id=\u0026quot;view_waiting_parsing\u0026quot;\u0026gt; \u0026lt;template\u0026gt; \u0026lt;div class=\u0026quot;alert alert-info\u0026quot; style=\u0026quot;max-width: 780px;\u0026quot;\u0026gt; \u0026lt;p\u0026gt;\u0026lt;i class=\u0026quot;fa fa-clock-o\u0026quot;\u0026gt;\u0026lt;/i\u0026gt; Ожидается.\u0026lt;/p\u0026gt; \u0026lt;p\u0026gt;Подождите немного и все будет. Страница будет обновляться сама и даст вам скачать файл, когда придет время\u0026lt;/p\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/template\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; states=\u0026quot;waiting_parsing\u0026quot; id=\u0026quot;timer_waiting_parsing\u0026quot; internal\u0026gt; function main(pvm) { if (pvm.data.waiting_cnt.rows[0].cnt \u0026gt; 0) { pvm.__refreshAfter = 2000; } else { pvm.__refreshAfter = null; pvm.changeState('default'); } } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; order=\u0026quot;100\u0026quot; id=\u0026quot;tasks\u0026quot;\u0026gt; SELECT t.creation_time, t.status, t.retries, (CASE WHEN u.id=${env.userId} OR [#if env.hasRoleDev || env.hasRoleSupport]true[#else]false[/#if] THEN '\u0026lt;a target=\u0026quot;_blank\u0026quot; href=\u0026quot;' || (COALESCE(t.result_data-\u0026gt;\u0026gt;'downloadUrlPart')) || '.csv\u0026quot;\u0026gt;\u0026lt;i class=\u0026quot;fa fa-download\u0026quot;\u0026gt;\u0026lt;/i\u0026gt;\u0026amp;nbsp;\u0026amp;nbsp;Скачать\u0026lt;/a\u0026gt;' ELSE '-' END) as html_field_ссылка, COALESCE(t.end_time, NOW())-COALESCE(t.start_time, t.target_time) as duration, u.full_name, '\u0026lt;a href='||(info-\u0026gt;'intranet'-\u0026gt;'url')::text||' target=\u0026quot;_blank\u0026quot;\u0026gt;\u0026lt;img class=\u0026quot;img-circle\u0026quot; src='||(info-\u0026gt;'intranet'-\u0026gt;'avatar')::text||'/\u0026gt;\u0026lt;/a\u0026gt;' as \u0026quot;html_field_user\u0026quot; [#if env.hasRoleDev || env.hasRoleSupport] ,LEFT(REPLACE((last_error-\u0026gt;\u0026gt;'text')::text, E'\\\\n', ' '), 50) as last_error, json_build_object( 'last_error', json_build_object( 'expand', json_build_object( 'mode', 'modal', 'contentAsIs', last_error-\u0026gt;\u0026gt;'text', 'size', 'lg' ) ) ) as cell_props_field [/#if] FROM job.task t LEFT JOIN users u ON u.id=(t.data-\u0026gt;\u0026gt;'user_id')::bigint WHERE t.service_id='your_parser_script_name' ORDER BY ${sort}, t.creation_time DESC ${pager} \u0026lt;/script\u0026gt;  Пример фонового скрипта для страницы import os import shutil from tempfile import NamedTemporaryFile from metasdk import MetaApp META = MetaApp() log = META.log def download_file(media_id): dwn_response = META.MediaService.download(media_id, as_stream=True) dwn_response.raw.decode_content = True source_file = NamedTemporaryFile(delete=False) print(\u0026quot;source_file.name = %s\u0026quot; % str(source_file.name)) with open(source_file.name, \u0026quot;wb\u0026quot;) as out_file: shutil.copyfileobj(dwn_response.raw, out_file) return source_file.name def process_file(filepath): log.info(\u0026quot;Start process file\u0026quot;) # Запуск таски для отладки META.worker.debug_tasks = [ { \u0026quot;taskId\u0026quot;: \u0026quot;3bab8c75-4603-4b33-8aa6-5c22f76e4a5c\u0026quot;, \u0026quot;data\u0026quot;: { \u0026quot;user_id\u0026quot;: 10468, \u0026quot;media_id\u0026quot;: \u0026quot;3bab8c75-4603-4b33-8aa6-5c22f76e4a5c\u0026quot;, } } ] @META.worker.single_task def main(task): task_id = task[\u0026quot;taskId\u0026quot;] user_id = task[\u0026quot;data\u0026quot;][\u0026quot;user_id\u0026quot;] media_id = task[\u0026quot;data\u0026quot;][\u0026quot;media_id\u0026quot;] log.set_entity(\u0026quot;user_id\u0026quot;, user_id) log.set_entity(\u0026quot;media_id\u0026quot;, media_id) filepath = None try: filepath = download_file(media_id) process_file(filepath) finally: if filepath and os.path.exists(filepath): os.remove(filepath)  "
},
{
	"uri": "https://developers.devision.io/meta/work_with_data/",
	"title": "Работа с данными",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/",
	"title": "Элементы UI",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/guides/template_engines/",
	"title": "Шаблонизация",
	"tags": [],
	"description": "",
	"content": " Для шаблонизации используется freemarker.org. Отсутствие переменных при шаблонизации сейчас не является фатальной ошибкой, переменная в такой случае будет заменяться пустой строкой.\nBackend шаблонизация Условия do-if Используется для условной фильтрации скриптов и элементов на бекенде. Скрипты не будет исполняться и будет предотвращать отрисовку связанных элементов. Элементы, при установки do-if на них не будут приходить на фронтенд\nПример: https://samples-demo.devision.io/page?p=4551\u0026amp;a=35\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta\u0026quot; id=\u0026quot;all_activity\u0026quot; do-if=\u0026quot;env.sp.activity_mode=='all'\u0026quot;\u0026gt; select now() \u0026lt;/script\u0026gt;  Функции Пример вызова:\n ${get_bean(String)} - Получение инстанса Java сервиса ${to_json(Object)} - Конвертация объекта в json ${to_date(String)} - Приведение к дате ${pg_quote_literal(String)} - Экранирование строки для PostgreSQL ${pg_quote_ident(String)} - Экранирование идентификатора (имя столбца, таблицы, схемы) для PostgreSQL  Полезно знать! Есть простой способ привести переменную-объект из env.sp к json строке. Обрабатываются такие случаи: \u0026ldquo;:env.sp.obj.schedules$to_json::jsonb\u0026rdquo;, эта запись эквивалентна \u0026lsquo;${pg_quote_literal(to_json(env.sp.obj.schedules))}\u0026rsquo;::jsonb. Данные из pvm пока не обрабатывается таким образом.\nРабота с таблицами ${pager} Добавляет limit/offset в запрос и пагинатор на страницу\nSELECT * FROM user ${pager}  ${sort} Добавляет поле сортировки в таблицу в UI и в запрос.\nSELECT * FROM user ORDER BY ${sort}, id, name  Работа с датой и временем и локализация Мета использует Java 8 DateTime API Пример: https://samples-demo.devision.io/page?p=3750\u0026amp;a=35\nНачало предыдущего месяца ${ref.now.withDayOfMonth(1).minusMonths(1)?date}  Локализация даты ru_RU http://freemarker.org/docs/ref_builtins_date.html\nhttp://freemarker.org/docs/pgui_config_settings.html\n[#setting locale=\u0026quot;ru_RU\u0026quot; /] ${to_date('1988-07-03')?date?string.medium}  Frontend шаблонизация Handlebars используется для простых шаблонов в интерфейсе для me-card-list и в последствии для ячеек me-table.\nmeta-хелперы xif Стандартный Handlebars не имеет нужных наш гибких условий шаблонизации, поэтому пришлось расширять. Мы выбрали: https://gist.github.com/akhoury/9118682\n{{#xif \u0026quot; row.id == 6 \u0026quot;}} If it works! {{/xif}}  json Приведение объекта к json строке. Выбрали: http://zshawnsyed.com/2015/04/30/output-json-in-handlebars/\n{{{json row}}}  или\n{{#json row}}{{/json}}  elink Вставка ссылки на карточку meta объекта. В примере выводим список ссылок\n{{#each row.clients}} {{elink objectId=id id=\u0026quot;190\u0026quot; name=name}}{{#unless @last}},{{/unless}} {{/each}}  "
},
{
	"uri": "https://developers.devision.io/meta/guides/charts/",
	"title": "Графики",
	"tags": [],
	"description": "",
	"content": " Являются элементами me-chart. Работают на основе google charts. Примеры тут: http://samples-demo.devision.io/page?a=35\u0026amp;p=3623\nОграничения  Поддерживаются не все типы графиков гугла, новый тип нужно прописывать и настраивать в ядре платформы мета. Поддердиваются не все параметры графиков. Мета старается выводить графики \u0026ldquo;по-умолчанию\u0026rdquo; более менее приемлимо как может для общего случая.  Атрибуты У графиков есть общие мета-атрибуты и обычно настройка графика заканчивается именно ими.\nИ нативные Google - например для column chart , которые указываются через nativeOptions, но в общем случае это не рекомендуется.\nАтрибут nativeOptions можно использовать как вариант для тестирования и с последующим запросом впиливания опции как мета параметр графиков.\n"
},
{
	"uri": "https://developers.devision.io/meta/guides/cache/",
	"title": "Кеширование",
	"tags": [],
	"description": "",
	"content": " Многие системы имеют встроенные механизмы кеширование и META не исключение.\nВ META есть два вида кеша - пользовательский и глобальный.\nУ скрипта есть два атрибута:\n \u0026ldquo;cache\u0026rdquo; - время жизни кеша в формате 10s - секунды, 10m - минуты, 10h часы. \u0026ldquo;cache-company\u0026rdquo; - добавляется к настройке \u0026ldquo;cache\u0026rdquo; и говорит о том, что кеш не зависит от пользователя, но зависит от env.companyId. Без \u0026ldquo;cache\u0026rdquo; не работает. Не может принимать значения true/false \u0026ldquo;cache-global\u0026rdquo; - добавляется к настройке \u0026ldquo;cache\u0026rdquo; и говорит о том, что кеш глобальный и не зависит от пользователя. Без \u0026ldquo;cache\u0026rdquo; не работает. Не может принимать значения true/false  Пользовательский кеш В примере указан только атрибут \u0026ldquo;cache\u0026rdquo;, что говорит, что кеш есть, он на 5 минут и он зависит от пользователя Зависит от: applicationId, objectId, objectId, stateParams, state, limit/offset и userId\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; id=\u0026quot;res\u0026quot; cache=\u0026quot;5m\u0026quot;\u0026gt; SELECT ... \u0026lt;/script\u0026gt;  Кеш уровня companyId Зависит от: applicationId, objectId, objectId, stateParams, state, limit/offset и companyId\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; id=\u0026quot;res\u0026quot; cache=\u0026quot;5m\u0026quot; cache-company\u0026gt; SELECT ... \u0026lt;/script\u0026gt;  Глобальный кеш Зависит от: applicationId, objectId, objectId, stateParams, state, limit/offset\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; id=\u0026quot;res\u0026quot; cache=\u0026quot;5m\u0026quot; cache-global\u0026gt; SELECT ... \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/integrations/login_with_meta/",
	"title": "Вход через META",
	"tags": [],
	"description": "",
	"content": " Приложение запрашивает код Получение токена в обмен на код, извлеченный из URL:\n Приложение направляет пользователя на страницу META.OAuth, где он может разрешить доступ к своим данным. Пользователь разрешает доступ приложению. META.OAuth перенаправляет пользователя на адрес, указанный в поле Callback URL при регистрации приложения. Код подтверждения (или описание ошибки) передается в параметре URL перенаправления. Приложение получает адрес перенаправления и извлекает код подтверждения. Приложение отправляет POST-запрос с кодом. META.OAuth возвращает токен или ошибку в теле ответа.  Регистрируете приложение Вы можете добавить доверенное приложение, в таком случае мета не станет спрашивать у пользователя подтверждения в выдаче токена. Это полезно, когда вы делаете вход для своих внутренних сервисов.\nЗапрос кода подтверждения http://YOUR-META-URL/oauth2/authorize?response_type=code client_id=\u0026lt;идентификатор приложения\u0026gt; \u0026amp; redirect_uri=\u0026lt;адрес перенаправления\u0026gt; \u0026amp; state=\u0026lt;произвольная строка\u0026gt; \u0026amp; scope=\u0026lt;запрашиваемые необходимые права\u0026gt;  Получение кода подтверждения из URL Когда пользователь разрешает доступ к своим данным META.OAuth перенаправляет пользователя на указанный вами redirect_uri с добавлением GET параметра code\nОбмен кода подтверждения на токен Приложение отправляет код, а также свой идентификатор и пароль в POST-запросе.\nPOST /oauth2/token HTTP/1.1 Host: YOUR-META-URL Content-type: application/x-www-form-urlencoded Content-Length: \u0026lt;длина тела запроса\u0026gt; grant_type=authorization_code \u0026amp; code=\u0026lt;код подтверждения\u0026gt; \u0026amp; client_id=\u0026lt;идентификатор приложения\u0026gt; \u0026amp; client_secret=\u0026lt;пароль приложения\u0026gt;  Формат ответа с токеном { \u0026quot;scopes\u0026quot;: [ \u0026quot;userinfo.profile\u0026quot; ], \u0026quot;token_type\u0026quot;: \u0026quot;bearer\u0026quot;, \u0026quot;expires\u0026quot;: 300, \u0026quot;access_token\u0026quot;: \u0026quot;eyJraWQiOiJhZWRiYmZlN2NjZjA3YzRiZWZkNDUwOTAxNTAxYjgzNzg3Njg1ZWNmIiwidHlwIjoiSldUIiwiYWxnIjoiUlMyNTYifQ.eyJhdWQiOiJhcGlzLmRldmlzaW9uLmlvIiwic3ViIjoiMTAxOTEiLCJpdWlkIjowLCJzY29wZSI6InVzZXJpbmZvLnByb2ZpbGUiLCJpc3MiOiJ0b2tlbi1pc3N1ZXIuZGV2aXNpb24uaW8iLCJleHAiOjE1NDQ1NDY0NjYsImlhdCI6MTU0NDU0NjE2Nn0.kztLoOpqCSomQklGkORtkHS1Zg50SgIFn__79FNTZZJMLPrg0jj57aWQEcJwknWIN7yakUVq9RlEq8JL_k_LwNhFlZshaVCFDiOsXa3e6-U1l4z8ZRYOPcbT0imWdajHB34pU95Q-_OQWlsAhvWTqGd04maUil0EbubwDOuaLZlOpXbgjn2paGe_E0augK9DJk4XVHC24RD8ZKluzJLE0PO22AzI44tJu2WgB_P_alT6Z6R6ur8-yWhEjCEHyUb9a9Elq-qNcDnxg4Td9GP4nFsfCak4zZd6jWE0ITfpDsYuczINIQsYCgQIfeDB2plDqBMuzTEycOb5i1EmxzLEqw\u0026quot;, \u0026quot;refresh_token\u0026quot;: \u0026quot;da6e4c37987447312311a59fbc9d5b421\u0026quot;, \u0026quot;user_id\u0026quot;: 10191, \u0026quot;company_id\u0026quot;: 1 }   scopes: Области доступа, доступные этому токену token_type: Тип выданного токена. Всегда принимает значение «bearer» expires: Время жизни токена в секундах access_token: OAuth-токен с запрошенными правами refresh_token: Токен, который можно использовать только для продления срока жизни соответствующего OAuth-токена\u0026rdquo;\u0026rsquo;  Время жизни refresh-токена совпадает с временем жизни OAuth-токена.\nЕсли выдать токен не удалось, то ответ содержит описание ошибки:\n{ \u0026quot;token_type\u0026quot;: \u0026quot;bearer\u0026quot;, \u0026quot;error\u0026quot;: \u0026quot;\u0026lt;код ошибки\u0026gt;\u0026quot;, \u0026quot;error_description\u0026quot;: \u0026quot;\u0026lt;описание ошибки\u0026gt;\u0026quot; }  Обновить токен Получение токена в обмен на refresh-токен:\n Приложение отправляет POST-запрос с refresh-токеном. META.OAuth возвращает новый access_token в теле ответа.\nPOST /oauth2/token HTTP/1.1 Host: YOUR-META-URL Content-type: application/x-www-form-urlencoded Content-Length: \u0026lt;длина тела запроса\u0026gt; grant_type=refresh_token \u0026amp; refresh_token=\u0026lt;refresh_token\u0026gt; \u0026amp; client_id=\u0026lt;идентификатор приложения\u0026gt; \u0026amp; client_secret=\u0026lt;пароль приложения\u0026gt;   В теле ответа вы получите такую же структуру, как и в случае получения токена по authorization_code\n"
},
{
	"uri": "https://developers.devision.io/meta/guides/debug_and_logging/",
	"title": "Отладка и Логирование",
	"tags": [],
	"description": "",
	"content": " Отладка асинхронных запросов Раздел касается низкоуровневой отладки любых http-запросов на бекенд:\n от refPvmData от refPvmValidators refPvmData + depends и т.д. По сути везде, где данные передаются на бекенд или принимаются с него  Для этого рекомендуется использовать отладчик браузера, например Chrome, смотреть вкладку с запросами по сети и фильтровать данные по нужной вам странице.\nБолее поробное описание процесса с примерами в этом видео:\n  Логирование Логирование доступно в meta/js скриптах. Чтобы начать логировать вам надо получить (заинжектить) инстанс логера через параметр вашей main функции. Для логирования используется slf4j тут можно посмотреть его интерфейсы http://www.slf4j.org/api/org/slf4j/Logger.html\nНа текущий момент известны некоторые проблемы с логированием:\n Логов вообще нет: соединение с бекэндом по websocket-ам было потеряно и не смогло восстановится. F5 скорее всего решит проблему Нет конкретного лога: Не все объекты, прикладываемые в качестве интерполируего аргумента лога могут быть приведены к строке и из-за этого весь лог может пропадать. Попробуйте в этом месте исключить аргументы и посмотреть что будет.  А вот примеры вызова\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;my_src\u0026quot; \u0026gt; function main(log) { log.info('test info'); log.warn('test warning'); log.error('test error'); var myvar = {a:1}; log.info('lalala {}', myvar); } \u0026lt;/script\u0026gt;  Из нюансов стоит выделить, что логи запросов к БД будут пренесены в фильтр дебаг-логов в браузере.\n"
},
{
	"uri": "https://developers.devision.io/meta/guides/build_url/",
	"title": "Ссылки: Построение URL",
	"tags": [],
	"description": "",
	"content": " При программировании в Мете во всех случаях стройте ссылки стандартными функциями, всегда стройте относительные ссылки (без имени домена).\nПараметры URL  a - applicationId p - pageId e - entityId. ID типа сущности. o - objectId. PrimaryKey в таблице сущности env - environment params. JSON закодированный в base64 Тут все фильтры, сортировки и пр.  Стандартные механизмы В мете уже есть стандартные средства генерации url на карточку объекта или на обычную страницу. Используйте для этого:\n Основной вариант для таблиц - стройте ссылки в таблице запросом через entity_linkfield (https://samples-demo.devision.io/page?p=3292\u0026amp;a=35), page_linkfield (https://samples-demo.devision.io/page?p=3294\u0026amp;a=35) или hreffield Для дашбордов - LinkBuildService для meta/js Не рекомендуется, так как обычно есть варианты проще - $root.buildEnvUrl для html шаблонов (https://samples-demo.devision.io/page?p=3788\u0026amp;a=35)  LinkBuildService пример Пример как использовать билдер урл вместе с me-lego, стилизованную под прямоугольную карточку дашборда\nДля ссылки на /page var elem = { name: \u0026quot;me-lego\u0026quot;, label: \u0026quot;Эффективность рекламы\u0026quot;, span: 12, attrs: { style: 'card', externalLink: { url: LinkBuildService.getPageFullUrl( '{YOUR_PAGE_ID}', { // env.sp period: env.sp.period }, { // НЕОБЯЗАТЕЛЬНО // env.search \u0026quot;offset\u0026quot;: 0, \u0026quot;limit\u0026quot;: 100, \u0026quot;orderByField\u0026quot;: 2, // инлекс столбца сортировки. имя передать нельзя \u0026quot;orderBySort\u0026quot;: \u0026quot;DESC\u0026quot; } ), text: \u0026quot;Посмотреть отчет\u0026quot; } } }  Для ссылки на /card var elem = { name: \u0026quot;me-lego\u0026quot;, label: \u0026quot;Эффективность рекламы\u0026quot;, span: 12, attrs: { style: 'card', externalLink: { url: LinkBuildService.getCardFullUrl( '{YOUR_ENTIY_ID}', '{YOUR_OBJECT_ID}', '{YOUR_PAGE_ID}', { // env.sp. Нужно если вам нужна ссылка на карточку объекта сущности, а там таблица и в ней фильтры period: env.sp.period }, { // НЕОБЯЗАТЕЛЬНО // env.search \u0026quot;offset\u0026quot;: 0, \u0026quot;limit\u0026quot;: 100, \u0026quot;orderByField\u0026quot;: 2, // инлекс столбца сортировки. имя передать нельзя \u0026quot;orderBySort\u0026quot;: \u0026quot;DESC\u0026quot; } ), text: \u0026quot;Посмотреть отчет\u0026quot; } } }  Параметры  a - applicationId p - pageId e - entityId. ID типа сущности. o - objectId. PrimaryKey в таблице сущности env - environment params. JSON закодированный в base64 Тут все фильтры, сортировки и пр.  Ручная генерация ссылок Когда вам нужно построить правильную ссылку на страницу Меты из другого проекта и эта ссылка должна содержать фильтры или параметры страниц вы должны следовать этому алгоритму генерации.\nНапример у нас есть ссылка:\n/page?p=onec_doc_info\u0026amp;env=eyJwX29uZWNfZG9jX2luZm8iOnsic3AiOnsiYWN0aXZlX21vZGUiOiJhbGwiLCJvcmdfaWRzIjpbM119fX0\u0026amp;a=58   onec_doc_info - будет означать вполне конкретную страницу. Вы должны знать этот ID a - будет означать id приложения. Вы должны знать этот ID  Раскодированный env будет выглядеть так:\n{ \u0026quot;p_onec_doc_info\u0026quot;: { \u0026quot;sp\u0026quot;: { /* StateParams. Фактически параметры страницы. Зависят от конкретной страницы */ \u0026quot;active_mode\u0026quot;: \u0026quot;all\u0026quot;, \u0026quot;org_ids\u0026quot;: [ 3 ] }, \u0026quot;search\u0026quot;: { /* Это фильтры общего поиска и сортировки таблиц, скорее всего они вам не понадобятся */ \u0026quot;offset\u0026quot;: 0, \u0026quot;limit\u0026quot;: 20, \u0026quot;orderByField\u0026quot;: 5, \u0026quot;orderBySort\u0026quot;: \u0026quot;DESC\u0026quot; } } }  Ключ в словаре строится по шаблону \u0026ldquo;p_{PAGEID}$e{ENTIRYID}$o{OBJECTID}\u0026ldquo;. При этом если entityId или objectId нет, то и $e* b $o_* не должны присутствовать в url. Скорее, лучше всего алгоритм пояснит код на JavaScript:\nfunction getPageUrlKey(data) { let key = 'p_' + data.pageId; if (data.entityId) { key += '$e_' + data.entityId; } if (typeof data.objectId !== 'undefined') { key += '$o_' + data.objectId; } return key; }  "
},
{
	"uri": "https://developers.devision.io/meta/samples/pages/report_with_filters/",
	"title": "Простейший отчет с фильтрами",
	"tags": [],
	"description": "",
	"content": " Для начала ознакомьтесь со статьей [Жизненный цикл запроса](../../../guides/request_life_cycle)  Типичная задача META - вывод списка объектов в виде отчета с фильтрами.\nОбычно отчет представляет из себя одну таблицу с фильтрами. Script id такой основной таблицы рекомендуется называть \u0026ldquo;res\u0026rdquo;, чтобы другим разработчикам было привычнее читать ваш код.\nКод примера \u0026lt;!-- Фильтрация Атрибут page-search объединяет эти фильтры в общий блок пресетов. Это позволяет пользователю быстрее находить фильтры и сохранять пресеты фильтров --\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; label=\u0026quot;Организация\u0026quot; id=\u0026quot;org_ids\u0026quot; elem=\u0026quot;me-select\u0026quot; order=\u0026quot;1\u0026quot; span=\u0026quot;4\u0026quot; elem-attrs='{\u0026quot;multiple\u0026quot;:true}' page-search\u0026gt; SELECT \u0026quot;organizationId\u0026quot; as id, name as name FROM \u0026quot;organization\u0026quot; order by name \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; label=\u0026quot;Статус\u0026quot; id=\u0026quot;active_mode\u0026quot; elem=\u0026quot;me-select\u0026quot; default=\u0026quot;all\u0026quot; order=\u0026quot;1\u0026quot; span=\u0026quot;4\u0026quot; page-search\u0026gt; SELECT t.* FROM (VALUES ('all', 'Все'), ('active', 'Активные'), ('no_active', 'Неактивные')) as t(id,name); \u0026lt;/script\u0026gt; \u0026lt;!-- Основная таблица Большие таблицы обычно делаем с order=\u0026quot;100500\u0026quot;, чтобы они всегда точно буду в самом низу. elem-attrs c ключом native делает настройки по умолчанию для me-pivot, которые нужны для режима Анализ данных, который есть почти на всех таблоицах автоматически --\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;res\u0026quot; entity-id=\u0026quot;2629\u0026quot; label=\u0026quot;Шаблон страницы по умолчанию\u0026quot; elem-attrs='{\u0026quot;native\u0026quot;: { \u0026quot;cols\u0026quot;: [\u0026quot;isActive\u0026quot;], \u0026quot;rows\u0026quot;: [\u0026quot;org_name\u0026quot;], \u0026quot;vals\u0026quot;: [\u0026quot;salary\u0026quot;], \u0026quot;aggregatorName\u0026quot;: \u0026quot;Сумма\u0026quot;, \u0026quot;menuLimit\u0026quot;: 10000, \u0026quot;rendererName\u0026quot;: \u0026quot;Table With Subtotal\u0026quot;, \u0026quot;skipEmptyLines\u0026quot;: true, \u0026quot;unusedAttrsVertical\u0026quot;: \u0026quot;horizontal\u0026quot; }}' elem-attrs='{\u0026quot;addObjectButton\u0026quot;:{\u0026quot;title\u0026quot;:\u0026quot;Сотрудник\u0026quot;, \u0026quot;mode\u0026quot;:\u0026quot;modal\u0026quot;}}' order=\u0026quot;100500\u0026quot; \u0026gt; SELECT -- Выбираемые поля \u0026quot;employeeId\u0026quot;, employee.\u0026quot;name\u0026quot;, \u0026quot;isActive\u0026quot;, \u0026quot;creationTime\u0026quot;, organization.name as org_name, organization.\u0026quot;workAfter\u0026quot; as org_work_after, (CASE WHEN \u0026quot;isActive\u0026quot; THEN '' ELSE 'ЗАБЛОКИРОВАН' END) as \u0026quot;статус\u0026quot;, \u0026quot;salary\u0026quot;::int8, -- Системная колонка - добавляет total в пагинатор и применяет параметры к колонкам json_build_object( 'pager', json_build_object('total', count(*) over()), 'headers', json_build_array( json_build_object('name', 'name', 'displayName', 'Имя'), json_build_object('name', 'creationTime', 'displayName', 'Добавлен', 'parentColumn', 'name'), json_build_object('name', 'isActive', 'displayName', 'Активный', 'parentColumn', 'name'), json_build_object('name', 'статус', 'parentColumn', 'name', 'hideNameInParentColumn', true), json_build_object('name', 'org_name', 'displayName', 'Организация'), json_build_object('name', 'org_work_after', 'displayName', 'Время работы', 'parentColumn', 'org_name'), json_build_object('name', 'salary', 'displayName', 'ЗП') ) ) as table_props_field FROM \u0026quot;public\u0026quot;.\u0026quot;employee\u0026quot; inner join organization ON organization.\u0026quot;organizationId\u0026quot; = employee.\u0026quot;organizationId\u0026quot; WHERE employee.name ILIKE ${env.search_text} -- Фильтрация данных таблицы [#if env.sp.org_ids?size\u0026gt;0] AND employee.\u0026quot;organizationId\u0026quot; IN ( :env.sp.org_ids ) [/#if] [#if env.sp.active_mode?has_content] [#if env.sp.active_mode = 'active'] AND employee.\u0026quot;isActive\u0026quot; [/#if] [#if env.sp.active_mode = 'no_active'] AND NOT employee.\u0026quot;isActive\u0026quot; [/#if] [/#if] ORDER BY ${sort}, \u0026quot;creationTime\u0026quot; DESC ${pager} \u0026lt;/script\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/samples/pages/simple_entity/",
	"title": "Список и редактирование сущности",
	"tags": [],
	"description": "",
	"content": " Смарт-формы Обратите внимание, что скорее всего вам будет достаточно функционала Смарт-форм.\nНо если вам по какой-то причине не хватает их функционала, можно использовать более старый подход, с гораздо большим количеством кода, но и с большей функциональностью.\nОбщее Для начала ознакомьтесь со статьей Жизненный цикл запроса\nТипичная задача META - вывод списка объектов и их редактирование\nРегистрация Entity Чтобы начать работать с новой сущностью добавьте ее в репозиторий META AppContent. В списке полей обычно достаточно указать primary key и поле, которе будет считаться именем объекта сущности. Для примера попробуем зарегистрировать таблицу example_entity из БД с meta id \u0026ldquo;meta_samples\u0026rdquo;.\nВ репозитории AppContent в директории /entity/meta_samples создайте файл example_entity___public.example_entity.yaml.\nТакое название файла надо читать так: {ENTITY_ID}___{DB_SCHEMA}.{DB_TABLE}.yaml Это именование позволяет быстро и легко искать файлы через IDE поиском по имени файла и пока что не влияет на парсер конфига, но будет влиять.\nКонтент файла:\nid: 'example_entity' name: Пример db_alias: meta_samples schema: public table: example_entity fields: - alias: id # для metaql db_type: uuid is_primary: true # говорит, что поле - первичный ключ name: id # название поля в БД - alias: name db_type: text is_title: true # говорит, что поле - является именем объекта сущности, например как users.full_name будет использовано для автоматического получения для названия объекта в хлебных крошках name: name  Добавьте новую страницу: Список сущностей в таблице \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;res\u0026quot; entity-id=\u0026quot;example_entity\u0026quot; elem-attrs='{\u0026quot;addObjectButton\u0026quot;:{\u0026quot;title\u0026quot;:\u0026quot;Entity\u0026quot;, \u0026quot;mode\u0026quot;:\u0026quot;modal\u0026quot;, \u0026quot;modalSize\u0026quot;:\u0026quot;lg\u0026quot;, \u0026quot;env\u0026quot;:{\u0026quot;sp\u0026quot;:{\u0026quot;obj\u0026quot;:{\u0026quot;name\u0026quot;:\u0026quot;test\u0026quot;}}} }}' order=\u0026quot;1000\u0026quot;\u0026gt; SELECT ee.id, ee.name, ee.creation_time, json_build_object( 'pager', json_build_object('total', count(*) over()), 'headers', json_build_array( json_build_object('name', 'id', 'isVisible', false), json_build_object('name', 'name', 'displayName', 'Имя'), json_build_object('name', 'creation_time', 'displayName', 'Добавлено') ) ) as table_props_field FROM example_entity ee ORDER BY ${sort} ${pager} \u0026lt;/script\u0026gt;  Добавьте новую страницу: Редактирование объекта в карточке Зайдите на страницу на своем домене: /card?e=example_entity\u0026amp;o=1\u0026amp;a=ВАШ_APP_ID\n o=1 - нужно чтобы мета показала левое меню сущности, чтобы мы могли добавить первую страницу a=XXX - id вашего приложения  Итак, добавьте новую страницу и зайдите в ее параметры:\n Роль: \u0026ldquo;Основная страница создания/редактирования/просмотра объекта\u0026rdquo; Снимите галку с \u0026ldquo;Сохранять состояние в URL\u0026rdquo;. Для редактирование карточек это скорее плохо, а для страниц с отчетами это позволяет не думать о сохранении параметров фильтор в url Когда страница готова к публикации снимите галку с \u0026ldquo;Показывать в меню только разработчикам\u0026rdquo;, если вы хотите чтобы все пользователи видели ее в меню  Далее работаем с контентом страницы:\n Вставьте контент Замените db-alias на свой Замените название таблицы и список полей на свои\n\u0026lt;script id=\u0026quot;name_validator\u0026quot; type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; depends=\u0026quot;name\u0026quot;\u0026gt; SELECT 'name_validator_unique' as id, 'Имя уже используется' as name FROM public.example_entity WHERE name = :env.sp.name LIMIT 1 \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; id=\u0026quot;info\u0026quot; internal\u0026gt; -- выбирайте только те поля, которые вам нужны SELECT id, name, creation_time, last_user_id FROM public.example_entity WHERE id=NULLIF(:env.objectId, '0')::uuid LIMIT 1 \u0026lt;/script\u0026gt; \u0026lt;elem states=\u0026quot;default\u0026quot; order=\u0026quot;190\u0026quot;\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;form name=\u0026quot;editGroupForm\u0026quot; ng-submit=\u0026quot;changeState('save', {obj:env.sp.obj})\u0026quot;\u0026gt; \u0026lt;me-lego elems=\u0026quot;editCard.elems\u0026quot; output=\u0026quot;env.sp.obj\u0026quot;\u0026gt;\u0026lt;/me-lego\u0026gt; \u0026lt;div ng-if=\u0026quot;$root.isDebugMode\u0026quot;\u0026gt; \u0026lt;pre\u0026gt;{{env.sp.obj|json}}\u0026lt;/pre\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;/elem\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;editCard\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;default\u0026quot;\u0026gt; function main(vm, pvm, env) { // Получаем инфу из бд, если редактирвание или указываем здачение по умолчанию var info = pvm.data.info.notEmpty ? pvm.data.info.rows[0] : {}; // Не добавляейте в env секретные поля - эти данные уйдут в интерфейс pvm.initEnvSp(env, {obj: info}); vm.elems = [ { id: \u0026quot;name\u0026quot;, label: \u0026quot;Название\u0026quot;, span: 12, name: \u0026quot;me-input\u0026quot;, refPvmValidator: {id: \u0026quot;name_validator\u0026quot;}, attrs: { required: true, min: 2, max: 30 } }, {name: \u0026quot;newrow\u0026quot;}, { id: \u0026quot;submit\u0026quot;, name: \u0026quot;me-submit\u0026quot;, attrs: { value: '${i18n(\u0026quot;common.saveButton\u0026quot;)}' } } ]; } \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;meta_samples\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;save\u0026quot; id=\u0026quot;upsert\u0026quot;\u0026gt; INSERT INTO example_entity (id, name, last_user_id) VALUES ( COALESCE(NULLIF(:env.objectId, '0')::uuid, uuid_generate_v4()), :env.sp.obj.name, :env.userId ) ON CONFLICT (id) DO UPDATE SET name = EXCLUDED.name RETURNING id; \u0026lt;/script\u0026gt; \u0026lt;script type=\u0026quot;meta/js\u0026quot; elem=\u0026quot;hidden\u0026quot; states=\u0026quot;save\u0026quot;\u0026gt; function main(pvm, vm, env, ObjectLogService) { var isNew = !env.hasObjectId; var objectId = isNew ? pvm.data.upsert.rows[0].id : env.objectId; if (isNew) { pvm.redirect = { url: \u0026quot;/card?e=\u0026quot; + env.entityId + \u0026quot;\u0026amp;o=\u0026quot; + objectId + \u0026quot;\u0026amp;a=\u0026quot; + env.applicationId }; } else { pvm.toInitialState(); pvm.closeModal(); } pvm.popup = {level: \u0026quot;success\u0026quot;, message: \u0026quot;${i18n('common.saveSuccess')}\u0026quot;}; ObjectLogService.logValue(env.entityId, objectId, isNew ? 'ADD' : 'SET', env.sp.obj); } \u0026lt;/script\u0026gt;   "
},
{
	"uri": "https://developers.devision.io/meta/work_with_data/metaql/",
	"title": "Язык запросов META (METAQL)",
	"tags": [],
	"description": "",
	"content": " METAQL - Это защищенный SQL для запросов к данным меты. Основан на синтаксисах Oracle + PostgreSQL. Призван дать хороший и безопасный API к данным таблиц или views ваших БД.\nОсобенности  SELECT * FROM ... не поддерживается Нельзя называть поля или алясы зарезарвированными именами: date Добавлен оператор ILIKE для регистронезависимного сравнения строк Поддерживаются только SELECT запросы JOIN не поддерживаются Работает ограниченный набор функций, описанных ниже OR в условиях не поддерживается. Используется AND с отицанием или IN ( \u0026hellip; )  Функции Работают функции агрегации:\n MIN, MAX, SUM, AGV COUNT(*), COUNT(DISTINCT поле) ARRAY_AGG  Функции преобразований:\n ROUND CONCAT NULLIF COALESCE  Экранирование Одинарная кавычка экранируется одинарной кавычкой. Например, еси вам нужно поискать все кампании, в названии которых есть одинарная кавычка, то вам необходимо выполнить такой запрос:\nselect id, remote_id, name, engine from adplatform.campaign where name like '%''%'  Ели нужно поискать клиента по точному совпадению, то принцип будет такой же:\nselect id, name from adplatform.client where name = 'Тестовый '' проект'  Как сделать таблицу доступной через METAQL API ? Выполните следующие действия:\n1) Добавьте новую Сущность для своей таблицы (если нужно)\nОбязательно укажите alias. Alias должен быть указан в формате lower_camel_case. Добавить можно здесь: https://samples-demo.devision.io/page?p=62\u0026amp;a=1\nОпционально укажите metaql_where Это поле отвечает за безусловную фильтрацию данных при любом запросе к METAQL. Например для статистики хорошо фильтровать по доступным клиентам:\n#table.client_id in (select client_id from get_user_clients(${env.userId?number}) )  \u0026rsquo;#table\u0026rsquo; - это плейсхолдер metaql таблицы. он будет заменен на реальное имы при компиляции запроса\n2) Заполните поля Сущности\nОбязательно укажите alias. Alias должен быть указан в формате lower_camel_case.\nИспользование LEGO MetaQL можно использовать в lego формах для того, чтобы не делать отдельные script\nНапример это активно используется в тикетной системе, где из-за высокого уровня абстракции нет возможности хардкодить отдельные script-ы для получения данных\nОбратите внимание, что доступна фильтрация metaql по depends (\u0026ldquo;env.sp.org_id\u0026rdquo; из примера). Пример тут: https://samples-demo.devision.io/page?p=4528\u0026amp;a=35\nvar elems = [ // ... { id:\u0026quot;epl_list\u0026quot;, span: 4, label: \u0026quot;Сотрудники\u0026quot;, depends:[\u0026quot;org_id\u0026quot;], refPvmData: {id:\u0026quot;$metaql\u0026quot;, sp:{\u0026quot;dbQuery\u0026quot;: { command:\u0026quot; \\ SELECT id, name, salary \\ FROM meta_samples.employee \\ WHERE organization_id = :env.sp.org_id \\ ORDER BY name DESC \\ \u0026quot; }}}, }, { id:\u0026quot;epls_graph2\u0026quot;, label: \u0026quot;Стата\u0026quot;, name:\u0026quot;me-chart\u0026quot;, attrs: {\u0026quot;type\u0026quot;:[\u0026quot;line\u0026quot;, \u0026quot;table\u0026quot;], \u0026quot;nativeOptions\u0026quot;:{\u0026quot;vAxis\u0026quot;:{\u0026quot;logScale\u0026quot;:true}} }, refPvmData: {id:\u0026quot;$metaql\u0026quot;, sp:{\u0026quot;dbQuery\u0026quot;: { command:\u0026quot; \\ SELECT \\ stat_date, \\ SUM(impressions) as impressions, \\ SUM(clicks) as clicks, \\ SUM(cost) as cost \\ FROM adplatform.campaign_stats_report \\ WHERE client_id = 15759 \\ AND stat_date BETWEEN '2017-03-01' AND '2017-04-01' \\ GROUP BY stat_date \\ ORDER BY stat_date \\ \u0026quot; }}}, }, // ... ]  SDK Запрос к статистике SELECT engine as platform, campaign_remote_id, SUM(impressions) as impressions, SUM(clicks) as clicks, ROUND(SUM(cost), 3) as cost FROM adplatform.campaign_stats_report WHERE stat_date BETWEEN '2017-02-01' AND '2017-03-31' AND engine = 'banner' AND client_id IN (1, 2) GROUP BY platform, campaign_remote_id ORDER BY platform, campaign_remote_id  Запрос к шардированным данным системы Garpun SELECT match_type, count(id) as cnt FROM garpun_storage.keyword#{account_id} group by match_type  Получение изменившихся клиентов SELECT id, name, modification_time FROM adplatform.client WHERE modification_time \u0026gt; '2020-03-31T12:21:46+0300'  "
},
{
	"uri": "https://developers.devision.io/meta/guides/testing/",
	"title": "Тестирование",
	"tags": [],
	"description": "",
	"content": "Для того, чтобы на локальной мете можно было войти из под какого-то юзера или запустить тестирование сделана возможность просто указать user_id из-под которого нужно далать авторизоваться\u0026amp;\nhttp://localhost:9999/?local_auth_user_id=XXX где XXX - user_id  Это работает только на тех сборках, где в глобальном конфиге указан isDevMode: true\nisDevMode: true \u0026lt;------------- Это нелья устанавливать в Production окружении isFetchDbsFromApi: true name: dev .....  "
},
{
	"uri": "https://developers.devision.io/meta/guides/i18n/",
	"title": "Интернационализация (i18n)",
	"tags": [],
	"description": "",
	"content": " На системном уровне поддерживаются языки: ru, en.  Для того, чтобы начать переводить нужно:\n добавить новые компоненты в таблицу meta.component, если текущих вам недостаточно. Не забудьте указать языки для перевода в поле i18n_langs разметить страницы копонентами в настройках старниц в app-content запустить i18n-app.py и собрать данные на перевод. если есть новые компоненты entity надо поместить в папку entity в компоненте  i18n-app.py отпарсит контент мета-страниц на наличие размерки перевода, а так же обойдет entity в app-content и соберет данные на перевод. Если в разметке entity если i18n_object, то скрипт скачает данные из таблицы этой entity и добавит данные на перевод в поле me_i18n. Так же скрипт пытается автоматически через google api перевести контент на перевод.\nФункции backend шаблонизации Для шаблонизации используется freemarker.org.\n ${i18n(String placeholder)} - Простой перевод ${i18n(String placeholder, String defaultText)} - Простой перевод с текстом по умолчанию ${i18n(String placeholder, List args, String? defaultText)} - Перевод с заменой плейсхолдеров в тексте. Плейсхолдеры выглядят как {0}, {1} и соответствуют индексу значения из списка args ${i18n_ename(String entityId)} - Получение имени Сущности ${i18n_efield(String entityId, String fieldName)} - Получение имени поля Сущности ${i18n_sql_ofield(String key)} - Получение перевода поля ${i18n_sql_ofield(String tableAlias, String key)} - Получение перевода поля в случае, если у вас больше одной таблицы в запросе и вам нужно указать альяс таблицы  Разметка entity id: '2701' name: Тикет i18n: true \u0026lt;---------- Указываем, что имя entity будет подвергаться переводу db_alias: meta schema: meta table: issue search_order: 100 object_list_base_page_id: '4176' fields: - alias: application_id db_type: text name: application_id - alias: assignee_user_id db_type: int8 name: assignee_user_id display_name: Исполнитель i18n: true - alias: creation_time db_type: timestamp display_name: Создано \u0026lt;---------- Указываем на базовом языке компонента i18n: true \u0026lt;---------- Указываем, для сбора на перевод указанного display_name is_disabled: true name: creation_time  id: '45' name: Продукт i18n: true \u0026lt;---------- Указываем, что имя entity будет подвергаться переводу i18n_object: \u0026lt;---------- Указываем для сбора записей из БД на перевод sql_where_clause: allowed_roles \u0026amp;\u0026amp; ARRAY['meta.role.auth', 'adhands.role.can_view_all_clients_yes'] \u0026lt;---------- Условие WHERE по которому будут отсекаться строки для перевода fields: - name: name \u0026lt;---------- Указываем для сбора записей из БД на перевод - name: description \u0026lt;---------- Указываем для сбора записей из БД на перевод db_alias: billing schema: public table: product search_order: 100 fields: - db_type: integer is_primary: true is_disabled: true name: id - db_type: text name: key - db_type: text is_required: true is_title: true name: name - db_type: description name: description  Перевод имени сущности Используется для lego или в label скриптов. Например перевод имени таблицы issue\n{ \u0026quot;label\u0026quot;: \u0026quot;${i18n_ename('2773')}\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;me-select\u0026quot; }  Перевод поля сущности Используется для lego или в label скриптов. Это например перевод имени поля таблицы issue\n{ \u0026quot;label\u0026quot;: \u0026quot;${i18n_efield(\u0026quot;2701\u0026quot;, \u0026quot;assignee_user_id\u0026quot;)}\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;me-select\u0026quot; }  Перевод поля объекта сущности Используется для перевода записей в таблицах, например, если вам нужно перевести список типов тикетов. Данные будут браться из поля me_i18n этой таблицы\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; id=\u0026quot;issue_status_ids\u0026quot; elem=\u0026quot;me-select\u0026quot; label=\u0026quot;\u0026quot; db-alias=\u0026quot;meta\u0026quot;\u0026gt; SELECT id, ${i18n_sql_ofield('name')} as name FROM meta.issue_status WHERE is_allowed ORDER BY 2 \u0026lt;/script\u0026gt;  Перевод страниц компонента на уровне компонента Парсер соберет данные на уровне компонента. Это нужно использовать когда этот текст не является названием Сущности или Поля сущности\n${i18n(\u0026quot;#.youCanceledChangeTariff\u0026quot;, \u0026quot;Вы отменили переход на тариф\u0026quot;)}  Функции frontend шаблонизации На уровне LEGO элемента, используются параметр i18n.\n[ { \u0026quot;id\u0026quot;: \u0026quot;login\u0026quot;, \u0026quot;i18n\u0026quot;: { \u0026quot;label\u0026quot;: \u0026quot;#.ex_system.login\u0026quot; }, \u0026quot;name\u0026quot;: \u0026quot;me-input\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;text\u0026quot;, \u0026quot;required\u0026quot;: true }, \u0026quot;label\u0026quot;: \u0026quot;Логин\u0026quot; }, { \u0026quot;id\u0026quot;: \u0026quot;password\u0026quot;, \u0026quot;i18n\u0026quot;: { \u0026quot;label\u0026quot;: \u0026quot;ex_system.password\u0026quot; }, \u0026quot;name\u0026quot;: \u0026quot;me-input\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;password\u0026quot;, \u0026quot;required\u0026quot;: true, \u0026quot;autocomplete\u0026quot;: \u0026quot;new-password\u0026quot; }, \u0026quot;label\u0026quot;: \u0026quot;Пароль\u0026quot; } ]  "
},
{
	"uri": "https://developers.devision.io/meta/integrations/embedded_frames/",
	"title": "Embedded Frames",
	"tags": [],
	"description": "",
	"content": "Пример на основе интеграции старого Garpun в новое META-приложение\nВ Garpun мы разместили код\n\u0026lt;script type=\u0026quot;text/javascript\u0026quot;\u0026gt; function inIframe() { try { return window.self !== window.top; } catch (e) { return true; } } document.addEventListener(\u0026quot;DOMContentLoaded\u0026quot;, function () { if (inIframe()) { // Это мы использовали чтобы убрать ненужные кнопки document.body.classList.add(\u0026quot;garpunEmbedded\u0026quot;); } document.body.classList.remove(\u0026quot;garpunLoading\u0026quot;); }); // (metaframewatcher = window.metaframewatcher || []).push({ height_classes: ['t_window', 'cover', 'stickyWrap', 'mainBox'] }); if (inIframe()) { // Это не относится к задаче встраивания напрямую, но наверняка будет полезно для GTM для отключения виджетов поддержки и пр window['IS_EMBED_MODE'] = true; // Размещаем загрузки интеграционного скрипта (function() { var lt = document.createElement('script'); lt.type ='text/javascript'; lt.src = 'https://app.garpun.com/_b/meta-element/iframe-content-watcher.js'; var sc = document.getElementsByTagName('script')[0]; if ( sc ) sc.parentNode.insertBefore(lt, sc); else document.documentElement.firstChild.appendChild(lt); })(); } \u0026lt;/script\u0026gt;  На странице META размещаем такой код\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; id=\u0026quot;token\u0026quot; internal\u0026gt; function main(env, vm, OAuthService) { // генерируем токен авторизации vm.accessToken = OAuthService.getAccessToken(env.userId, ['userinfo.profile']); } \u0026lt;/script\u0026gt; \u0026lt;!-- baseUrl - посадочная accessToken - токен авторизации, доступен в amp.garpun.com так как он переведен на общую авторизацию account.garpun.com minAbsHeightDiff - минимальное изменение высоты на которое сработает ресайз iframe. Будет зависеть от вашего случая handleUrls - набор правил переадресации, чтобы например при клите со списка алгоритмов внутри iframe мы могли открыть алгоритм не внутри iframe, а как url меты, т.е. карточку алгоритма в meta приложении --\u0026gt; \u0026lt;elem id=\u0026quot;garpunUrl\u0026quot; name=\u0026quot;me-iframe\u0026quot; order=\u0026quot;0\u0026quot; attrs='{ \u0026quot;baseUrl\u0026quot;:\u0026quot;https://amp.garpun.com/interface/clients/algorithms/?adHandsClientId=${env.objectId}\u0026quot;, \u0026quot;accessToken\u0026quot;:\u0026quot;${pvm.data.token.vm.accessToken}\u0026quot;, \u0026quot;minAbsHeightDiff\u0026quot;: 90, \u0026quot;handleUrls\u0026quot;: [ {\u0026quot;regexp\u0026quot;: \u0026quot;add-algorithm\\\\?algorithmId=(\\\\d+)\u0026quot;, \u0026quot;goTo\u0026quot;: \u0026quot;/card?e=182\u0026amp;o=$1\u0026amp;a=${env.applicationId}\u0026quot;} ] }' \u0026gt;\u0026lt;/elem\u0026gt;  "
},
{
	"uri": "https://developers.devision.io/meta/integrations/nginx/",
	"title": "Nginx Proxy Headers",
	"tags": [],
	"description": "",
	"content": " Настраиваются на nginx при проксировании запосов в Java приложение, или через Chrome плагин ModHeader (https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj) для разработки\nX-META-AppID Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр\nserver { listen *:80; server_name example.com; charset utf8; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-META-AppID 3; proxy_pass http://127.0.0.1:8083; } }  X-META-Allowed-Apps Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр Отличается от HEADER_X_META_APP_ID тем, что это будет работать как просто meta.realweb.ru, но не будет показывать главную страницу без указания приложения, т.е. будет работать только как embed вариант\nserver { listen *:80; server_name example.com; charset utf8; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-META-Allowed-Apps 'garpun, garpun_embed, express'; proxy_pass http://127.0.0.1:8083; } }  X-META-Dev-Restrict-Roles Разделенный через запятую список ролей, которым доступно нахождение не сайте. Обычно это разработчики и саппорт\nserver { listen *:80; server_name example.com; charset utf8; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-META-RESTRICT-ROLES 'meta.role.dev, meta.role.support' proxy_pass http://127.0.0.1:8083; } }  "
},
{
	"uri": "https://developers.devision.io/meta/integrations/sdk/",
	"title": "SDK",
	"tags": [],
	"description": "",
	"content": "Существует официальная библиотека для работу с метой на Python3\nИсходники\nДокументация\n"
},
{
	"uri": "https://developers.devision.io/meta/guides/db_naming/",
	"title": "Именование сущностей в БД",
	"tags": [],
	"description": "",
	"content": " При разработке новой БД предлагается придерживаться следующих правил. При этом, если у вас есть готовая БД, то вы не должны хотеть полностью переделать ее соглашения, так как это бесполезная работа. Просто продолжайте использовать то, что у вас есть.\n Все таблицы должны иметь несоставной первичный ключ, который должен называться id Все таблицы, представления, функции, триггерные функции и типы должны иметь комментарий Поля таблиц и view должны иметь комментарий. Исключения: поля с внешними ключами, общепонятные поля (первичный ключ, views, clicks, name, title и т.п.), enum-поля Последовательности (sequences) одних таблиц нельзя копировать для других, если это дейстивтельно не оправдано. Для новых таблиц используйте serial и bigserial как типы полей с первичным ключем Лучше, чтобы названия первичных, уникальных ключей, индексов должна выдавать БД при создании этих объектов - так мы сэкономим время на разбирательствах что и как должно называться, БД сама разберется как это называть. Параметры и переменные в хранимых процедурах должны начинаться с \u0026ldquo;_\u0026rdquo; чтобы не перепутать их с полями таблиц и пр. Все схемы, таблицы, предстваления, поля, функции, триггеры и пр. должны иметь нотацию lower_camelcase. По возможность избегайте использования зарезервированных имен типа user, domain, table и пр  Таблицы сущностей Должны иметь свой PK, желательно id\nЕдинственное число. Например client, entity, \u0026ldquo;user\u0026rdquo;, campaign, company, \u0026hellip;\nТаблицы связей Должны иметь свой PK, желательно id\nОдин ко многим: единственое_множественное. Например: client_managers\nМногие ко многим: client_manager, client_manager_link\nДата время (без TZ) Постфикс \u0026ldquo;_time\u0026rdquo;\nНапример: creation_time, modification_time\nТолько дата Если не предполагается хранить время, то поле обязательно должно иметь тип DATE, т.е. не содержать никаких меток времени и не должно быть сохранено в формате unix timestamp. Постфикс \u0026ldquo;_date\u0026rdquo;\nНапример: creation_date\nПоследний редактировавший пользователь Почти всегда нужен, чтобы триггеры могли писать логи\nНапример: last_user_id\nDDL CREATE TABLE my_table ( id text primary key, name text NOT NULL, creation_time timestamptz NOT NULL DEFAULT NOW(), modification_time timestamptz NOT NULL DEFAULT NOW(), last_user_id bigint NOT NULL ); CREATE TRIGGER update_modification_time_my_table BEFORE UPDATE ON public.my_table FOR EACH ROW EXECUTE PROCEDURE public.update_modification_time();  "
},
{
	"uri": "https://developers.devision.io/meta/integrations/",
	"title": "Интеграции",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/samples/pages/open_modal/",
	"title": "Открытие модального окна",
	"tags": [],
	"description": "",
	"content": " В таблице списке объектов сущности вывести страницу в контекстное меню Например у вас есть список пользователей и на карточке пользователя есть страница проектов, доступных пользователю.\n Включите режим разработчика, если он не ключен Зайдите на интресующую вас страницу Откройте меню радактирования настроек приложения в поле \u0026ldquo;Вид в контекстном меню\u0026rdquo; выберите \u0026ldquo;Модальное окно\u0026rdquo; или \u0026ldquo;Выезжающее справа окно\u0026rdquo; Сохраните Сбросьте кеш меты Обновите страницу через F5  Пример такой страницы: https://samples-demo.devision.io/card?e=example_entity\u0026amp;o=08f3395b-31f2-42c9-917e-a5f2b7bd4a95\u0026amp;p=5183\u0026amp;a=35\nНа карточке объекта сущности нужно вывести меню действия над объектом Например вы хотите сделать какое-то кастоное действие - выставить счет контагенту, по особенному удалить или что-то другое, не связанное просто с отображением таблиц и другой информации.\nДля меты это будет обычная страница, как и например та, которая просто отображает списки с фильтрами, поэтому ничего страшного в том, что она будет для ас и в левом меню тоже.\n Включите режим разработчика, если он не ключен Зайдите на интресующую вас страницу Откройте меню радактирования настроек приложения в поле \u0026ldquo;Роль\u0026rdquo; выберите \u0026ldquo;Актор объекта. В списке действий Сущности в модальном окне\u0026rdquo; проверьте, что стоит галочка на чекбоксе \u0026ldquo;Показывать в меню только разработчикам\u0026rdquo; Сохраните Сбросьте кеш меты Обновите страницу через F5  Пример такой страницы: https://samples-demo.devision.io/card?e=example_entity\u0026amp;o=08f3395b-31f2-42c9-917e-a5f2b7bd4a95\u0026amp;p=5311\u0026amp;a=35\nСтоит сказать, что галочка на \u0026ldquo;Показывать в меню только разработчикам\u0026rdquo; сейчас не обязательна, но по внутренним договоренностям мы считаем хорошей практикой показывать страницы действий только сверху.\nОткрыть добавление объекта через html Приведу пример из биллинга - подача заявки для перехода на дргой тариф. Заявка выполнена в виде тикета с типом согласование Тут мы видем использование технологии разметки перевода \u0026ldquo;i18n\u0026rdquo; в кнопке добавления новых объектов для entityId=2701 с заранее установленным env.sp\n\u0026lt;elem\u0026gt; \u0026lt;tpl\u0026gt; \u0026lt;me-add-obj-btn attrs='{\u0026quot;addObjectButton\u0026quot;:{ \u0026quot;mode\u0026quot;: \u0026quot;sidenav\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;${i18n(\u0026quot;#.productTariffTicketAdd\u0026quot;, \u0026quot;Подать заявку\u0026quot;)}\u0026quot;, \u0026quot;modalSize\u0026quot;: \u0026quot;lg\u0026quot;, \u0026quot;modalTitle\u0026quot;: \u0026quot;${i18n(\u0026quot;#.productTariffTicketAdd\u0026quot;, \u0026quot;Подать заявку\u0026quot;)}\u0026quot;, \u0026quot;cssClass\u0026quot;: \u0026quot;btn btn-sm btn-main\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;fa-gavel\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;sp\u0026quot;: { \u0026quot;card\u0026quot;: { \u0026quot;no_redirect_after_save\u0026quot;: true, \u0026quot;entity_id\u0026quot;: \u0026quot;2651\u0026quot;, \u0026quot;object_id\u0026quot;: \u0026quot;${env.companyId}\u0026quot;, \u0026quot;issue_type_id\u0026quot;: \u0026quot;devision_billing_tariff\u0026quot;, \u0026quot;form_data\u0026quot;: {\u0026quot;product_id\u0026quot;: ${env.objectId}} } } } }, \u0026quot;entityId\u0026quot;: \u0026quot;2701\u0026quot;}'\u0026gt;\u0026lt;/me-add-obj-btn\u0026gt; \u0026lt;/tpl\u0026gt; \u0026lt;/elem\u0026gt;  Открыть карточку объекта сущности при клике на ее название в списке Обязательно изучите документацию документацию по IEntityCardLink и изучите возможные атрибуты таблицы.\nВ данном примере код entityCardLink говорит, что при клике на название объекта будет происходить не переход на новую страницу, а будет открываться модальное окно с карточкой объекта.\n\u0026lt;script type=\u0026quot;meta/sql\u0026quot; db-alias=\u0026quot;adplatform\u0026quot; id=\u0026quot;res\u0026quot; entity-id=\u0026quot;2876\u0026quot; order=\u0026quot;100500\u0026quot; elem-attrs='{\u0026quot;addObjectButton\u0026quot;:{\u0026quot;title\u0026quot;:\u0026quot;Группа\u0026quot;, \u0026quot;mode\u0026quot;:\u0026quot;modal\u0026quot;, \u0026quot;env\u0026quot;:{\u0026quot;sp\u0026quot;:{\u0026quot;obj\u0026quot;:{\u0026quot;entity_id\u0026quot;:2876}}} }}' elem-attrs.entityCardLink.mode='modal' \u0026gt; ....  Открыть карточку выбранного объекта в выпадающем списке (me-input type=select) Например у вас сложная форма, где много инпутов и вам надо дать возможность быстро посмотреть карточку выбранного в одном из инпутов клиента. Для это используется атрибут элемента fastViewObjectButton.\nТак же обратите внимание на параметр addObjectButton он позволяет настроить поведение инпута для добавления объекта в список, например удобно там открывать страницу добавления клиента.\n{ id: \u0026quot;ex_access_id\u0026quot;, label: \u0026quot;Доступ\u0026quot;, name: \u0026quot;me-input\u0026quot;, refPvmData: {id: 'access_list', sp:{}, waitingId: 'wait_ex_access_for_google'}, attrs: { type: \u0026quot;select\u0026quot;, required: true, fastViewObjectButton: { drawActorList: false, drawTopMenu: false, modalSize: 'xs' }, \u0026quot;addObjectButton\u0026quot;: { \u0026quot;mode\u0026quot;: \u0026quot;sidenav\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;sp\u0026quot;: { \u0026quot;obj\u0026quot;: { \u0026quot;mode\u0026quot;: \u0026quot;feed\u0026quot;, \u0026quot;ex_system_id\u0026quot;: \u0026quot;google_adwords\u0026quot; } } }, \u0026quot;title\u0026quot;: \u0026quot;Подключить аккаунт\u0026quot; } }, \u0026quot;listen\u0026quot;: [ { \u0026quot;code\u0026quot;: [ \u0026quot;ADD\u0026quot;, \u0026quot;SET\u0026quot; ], \u0026quot;entityId\u0026quot;: 2830, \u0026quot;selectAfterAdd\u0026quot;: true, \u0026quot;refreshRefPvmData\u0026quot;: {} } ], \u0026quot;entityId\u0026quot;: 2830, }  "
},
{
	"uri": "https://developers.devision.io/meta/compoments/ticket/",
	"title": "Тикеты",
	"tags": [],
	"description": "",
	"content": " Таблицы  issue: Непосредственно сами тикеты. Основная таблица issue_entity: Сущности, доступные для выбора \u0026ldquo;категории\u0026rdquo; тикета при создании. Тип объекта, в рамках которого делается тикет. Например тикет может быть по клиенту, медиаплану, сотруднику issue_field: Доп. поля, которые можно навешивать потом на типы тикетов issue_logwork: Трекинг времени по тикетам issue_msg: Комментарии к тикетам, приложенные файлы issue_priority: Справочник приоритетов тикетов issue_status: Справочник статусов тикетов issue_type: Справочник типов тикетов, Тут настраивается доступность типов тикетов для issue_entity, доступность основных или доп полей  Управляющие функции БД Пользовательские функции для изменения бизнес логики отмечены жирным шрифтом.\n fill_new_issue_fields: Заполняет исполнителя и участников тикета  get_issue_access: Проверка ACL для доступа к тикету get_issue_type_object_kind_options: Возвращает список options для me-input. Настраивается под сложные запросы, где metaql будет излишне сложен. Далее есть детальеное описание работы с этим методом get_issue_type_object_details: Возвращает текст деталей по этому тикету, исходя из его сущности и типа в формате markdown. Используется в модуле _Согласование_ для отображения более полной информации по тому, что нужно согласовать. get_issue_assignee_variants: Возвращает возможных исполнителей для данного тикета в зависимости от типа и сущности, в рамках которой работает. Если возможных исполнителей несколько и пользователь не выберет конкретного при создании тикета, то при добавлении тикета автоматически будет выбран первый из списка.  Системные функции (нельзя менять):\n get_issue_log_md: Возвращает детали по истории изменений тикета в формате markdown get_issue_type_lego_form: Возвращает meta lego форму дополнительных полей для тикета after_issue_self_change: Триггер для логирования истории изменения тикета after_issue_msg_self_change: Триггер для логирования истории изменения комментариев тикета, а так же добавления участников тикета при упоминании их в комментариях get_approve_status: Получить статус согласованности тикета (с kind=approval)  Получение сложных списков для полей тикетов (get_issue_type_object_kind_options) Что нужно сделать c вашим me-input:\n добавить depends добавить refPvmData  Пример элемента со сложной зависимостью от других с подгрузкой данных из get_issue_type_object_kind_options\n{ \u0026quot;id\u0026quot;: \u0026quot;test_account\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;me-input\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;type\u0026quot;: \u0026quot;select\u0026quot;, \u0026quot;required\u0026quot;: true }, \u0026quot;label\u0026quot;: \u0026quot;Test account\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;issue_type_id\u0026quot;, \u0026quot;object_id\u0026quot;, \u0026quot;entity_id\u0026quot;, // Эти поля обязательно нужено указать в depends // Далее пользовательские поля // Знак @ использовать необязательно, но он может помочь вам не писать полный путь зависимости, а просто указать, // что зависимость на том же уровне LEGO иерархии // Подробнее https://developers.devision.io/meta/reference/ui_controls/typedoc/interfaces/_elems_i_me_input_.imeinput.html#depends \u0026quot;@.engine as engine\u0026quot;, \u0026quot;@.connection_id as connection_id\u0026quot; ], \u0026quot;refPvmData\u0026quot;: { \u0026quot;id\u0026quot;: \u0026quot;issue_type_object_kind_options\u0026quot;, \u0026quot;sp\u0026quot;: { // Обязательно укажите вид зависимости. Как правило это помогает разобраться в при трассировке запроса и в хранике для условий роутинга \u0026quot;kind\u0026quot;: \u0026quot;test_account\u0026quot; // Обязательно } }, \u0026quot;formHorizontal\u0026quot;: true }  Разновидности типов тикетов Тип: Согласование (kind=approval) Используются для реализации механизма согласования объектов. Хорошо подходят для этого так как:\n имеют уже готовый механизм уведомлений об изменениях имеют механизм комментирования в целом реализуют схожий с потребностями функционал, так как согласование - это фактически задача на другого человека с дедлайном и пр  У одной сущности может быть несколько типов согласования. Например для медиапланов может быть согласование самого МП (сумма и пр), а так же согласование файла заявки.\nДля каждого типа согласования следует делать отдельный issue_type, так как для разных типов согласования скорее всего понадобится разная сопроводительная информация из _get_issue_type_objectdetails.\nДля добавления нового типа согласования на сущность нужно:\n Добавить основное поле для сущности в issue_field, если поля еще нет Добавить сущность в issue_entity, если ее там нет и указать основное поле в issue_field_id Добавить запись в issue_type\n для нужной entity  c нужными application_ids как правило поле issue_fields заполнять не нужно mods для согласований обычно {assignee,deadline,description,priority} kind=approval is_helper=true allowed_roles={meta.role.dev} потому, что вам сперва нужно все проверить и только потом открывать тип тикета на всех пользователей  Реализуйте обработку получения деталей этого типа тикета в get_issue_type_object_details\n Реализуйте получение списка возможных исполнителей в get_issue_assignee_variants\n  Тип: Задача (kind=issue) Самые обычные типы тикетов. Ничего примечательного.\nМогут обрабатываться роботом или человеком.\n"
},
{
	"uri": "https://developers.devision.io/meta/configs/",
	"title": "Конфигурация",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/compoments/smart_forms/",
	"title": "Смарт-формы",
	"tags": [],
	"description": "",
	"content": " Мотивация Довольно часто нужно нарисовать типовую форму для добавления или редактирования строки таблицы Логированиче через ObjectLogService будет выполнено автоматически, а значит и Шина сможет принять событие, если будет нужно.\nАвтоматическая генерация формы Форма генерируется по внутреннним правилам, но подвигать контролы можно через их позициии в списке fields в yaml файле или атрибут order, но даже это не гарантирует, что они выстроятся в нужном вам порядке - мета сортирует блоками в соответствии со внутренними правилами.\nТип me-input так же пытается подобраться автоматически, исходя из заполненности полей:\n name db_type data_type semantic_role  Ширина me-input для поля высчитывается автоматически исходя из разных параметров, но может быть задана через атрибут поля lego_elem.span. В целом иногда есть задача вывести поле как textarea, для этого используется атрибут lego_elem. По сути там пишется все то, что можно писать в обычных ручных lego формах, но не обязательно описывать вообще все - впишите только то, что нужно переопределить по отношению к автосгенерированным свойствам.\nНапример:\n... - alias: name db_type: text is_title: true display_name: Название клиента name: name semantic_role: DIMENSION order: 100 \u0026lt;---------- сортировка, заданная вручную и не через само положение относительно других полей entity data_type: TEXT is_required: true lego_elem: \u0026lt;---- Все то, что рабоатет в lego формах (НЕ ОЯЗАТЕЛЬНО полное описание всего elem). Перетирается важными сгенерированными параметрами, например id, label, entityId, required и пр name: me-input span: 4 attrs: type: textarea ...  Настройка insert_query Иногда бывает, что надо вызвать хранимую процедуру для вставки объекта. Это можно сделать через настройку параметра insert_query в yaml, нужной entity. Данные формы придут как обычно в :env.sp.obj.*\nВАЖНО! Вы будете обязаны вернуть одну строку с одним полем с названием id.\nПараметры add_expression и set_expression Иногда при insert или update записи надо иметь высчитываемые поля, но часто они зависят от контекста, например userId. В примере нише рассматривается простейший случай, когда нам надо просто взять и вставить id пользователя (используется prepared statement), но тут можно написать и более сложный sql expression\n- name: author_user_id db_type: bigint display_name: Добавлено i18n: true foreign_entity_id: 2654 is_readonly: true add_expression: :env.userId - name: last_user_id db_type: bigint display_name: Изменено i18n: true foreign_entity_id: 2654 is_readonly: true add_expression: :env.userId set_expression: :env.userId  Связанный enum Enum-ы хранятся в таблице meta.enum и являются простыми справочниками, для которых не хочется заводить отдельные таблицы.\nВ смарт-формах можно очень легко автоматически получить контрол me-select для таких полей просто сделав ссылку на нужный вам справочник.\n... - db_type: text name: state foreign_enum_kind: 'billing_state' \u0026lt;-------- эта настройка управляет ссылкой на enum lego_elem: span: 4 ...  Мета внутри себя для такого поля сделает запрос:\nSELECT * FROM meta.enum_options_view WHERE kind=:kind ORDER BY name  В плейсхолдер :kind будет подставлено значение из foreign_enum_kind, в этом конкретном примере - billing_state.\nПрактический пример Пример настройки entity id: '190' name: Клиент db_alias: adplatform schema: public table: client alias: client kind: DICT metaql_where: '#table.id in (select client_id from get_user_clients(${env.userId?number}))' input_options_query: \u0026gt; select client.id, client.name, categories.name as description from client left join company on company_id = company.id left join client_category as categories on categories.id = client.category_id where client.is_enabled AND client.company_id=:env.companyId::bigint AND client.id in (select client_id from get_user_clients(:env.userId::bigint) ) ORDER BY 2 insert_query: \u0026gt; SELECT client_id as id FROM ext_garpun_main.\u0026quot;api_addClient\u0026quot;( :env.userId::bigint, :env.companyId::bigint, :env.sp.obj.name::text, 11 ); search_order: 1 object_list_base_page_id: '2176' acl: view: /* Не забывайте про ACL. У вас он может быть другой */ roles: - meta.role.auth fields: - alias: id db_type: bigint is_primary: true name: id display_name: ID semantic_role: DIMENSION data_type: LONG is_disabled: true - alias: name db_type: text is_title: true display_name: Название клиента name: name semantic_role: DIMENSION data_type: TEXT is_required: true - alias: is_enabled db_type: bool name: is_enabled display_name: Активный semantic_role: DIMENSION data_type: BOOLEAN - alias: is_archived db_type: bool name: archive display_name: Архивный semantic_role: DIMENSION data_type: BOOLEAN - alias: category_id db_type: int8 name: category_id data_type: LONG foreign_entity_id: 2768 semantic_role: DIMENSION default_value: 11 - alias: creation_time db_type: timestamp(0) name: creation_time display_name: Дата создания i18n: true data_type: DATETIME semantic_role: DIMENSION is_disabled: true - alias: modification_time db_type: timestamp(0) name: modification_time display_name: Дата изменения i18n: true data_type: DATETIME semantic_role: DIMENSION is_disabled: true  Пример 1 Например мы хотим получить форму редактирования всех полей нужной entity_id. Добавляем страницу в рамках нужной entity. В нашем случае для примера 190. Url меты должен быть примерно таким, когда вы работаете со страницей - /card?e=190\u0026amp;o={ТУТ_ID_ОБЪЕКТА} Это все, что надо на странице:\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; elem=\u0026quot;me-smart-form\u0026quot; id=\u0026quot;smart_form\u0026quot;\u0026gt; function main(SmartFormService, pvm, vm, env, originalEnv) { SmartFormService.handle(env, originalEnv, vm, pvm); } \u0026lt;/script\u0026gt;  Мета автоматически нарисует текствые поля для ввода текстовых значений, чекбоксы для boolean, нарисует выпадашки для полей, с указанным foreign_entity_id\nПример 2 Мы хотели получить редактор записи клиента, но так, чтобы при добавлении было только поле name, а при редактировании к нему добавлялся бы выбор category_id\nЭто все, что надо на странице:\n\u0026lt;script type=\u0026quot;meta/js\u0026quot; elem=\u0026quot;me-smart-form\u0026quot; id=\u0026quot;smart_form\u0026quot;\u0026gt; function main(SmartFormService, pvm, vm, env, originalEnv) { var fieldNames = ['name']; if (env.hasObjectId) { fieldNames.push('category_id'); } SmartFormService.handle(env, originalEnv, vm, pvm, { fieldNames: fieldNames }); } \u0026lt;/script\u0026gt;  Что далее? Не забудьте про обработчик событий сущности check_access для того, чтобы не делать проверку доступа к объекту на каждой странице сущности.\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/",
	"title": "Java API",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/reference/",
	"title": "Справочник по API",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/_header/",
	"title": "header",
	"tags": [],
	"description": "",
	"content": "META\n"
},
{
	"uri": "https://developers.devision.io/meta/",
	"title": "META",
	"tags": [],
	"description": "META - Изящная платформа для приложений корпоративного уровня",
	"content": " МЕТА - Платформа для построения сложных приложений корпоративного уровня Это может быть просто! Мы взяли на себя все сложности со сборками, развертываниями, фоновыми операциями. Повышает продуктивность в разы!\nВ Мете уже есть огромная библиотека элементов интерфейса с единым API, множесто стилей оформления элементов, много готовых примеров и практик для быстрого достижения результата. Вы удивитесь насколько просто вы можете начать делать отчеты, формы и строить графики!\nОбщие сведения  МЕТА содержит простую схему данных, набор унифицированных интерфейсов, обработок, которые позволяет реализовать функционал большинства бизнес-приложений. МЕТА подключается к данным приложения, импортирует модель и реализует обработку внешних данных МЕТА работает отдельно от “старых” приложений с их данными МЕТА позволяет быстро запускать SaaS приложения МЕТА сама написана на МЕТА  Возможности Если вкратце, то МЕТА позволяет:\n Быстро создавать отдельные приложения с общим ACL Выкладывать приложения на отдельные домены (https://reports.garpun.com, https://partner.realweb.ru) Настраивать иерархию страниц приложения Eдиные интерфейсные решения по фильтрации данных и кастомизации интерфейса Использовать богатый набор пользовательских элементов и строить из них страницы отчетов с графиками от Google или редактирования объектов Просто делать сложные зависимые элементы Кастомные пользовательские select-ы (скоро) Редактировать страницы прямо в браузере и публиковать их немедленно Писать фоновые скрипты на различных языках используя META CUSTOM USER API, RPC META API напрямую или через SDK Разрабатывать локально имея META Developer Key Подключаться к БД PostgreSQL, MySQL, MSSQL из коробки Подключаться к API различных систем напрямую или через БД (Google Analytics, Google AdWords, Yandex Direct и пр.) Связывать пользователей для быстрого перехода между учетными записями Переводить страницы на различные языки Очень быстро программировать страницы перехода между объектами (Как переключение между клиентами в AdHands) http://samples-demo.devision.io/page?a=63\u0026amp;p=3975 Создавать сборщиков событий (http event collector). И собирать важные логи для анализа в Yandex ClickHouse. Сейчас это запросов гапруна, adhands, meta в Я.Директ и другие Автоматические логирование действий пользователя Автоматически доступная выгрузка таблиц в Excel Простое добавление чата по объекту (наприме чам по клиенту, баннеру, ОМП и пр.) Возможность классификации любого объекта системы  Примеры Все примеры можно смотреть в приложении META Примеры. На нем гоняются тесты самой меты и там обычно самая актуальная информация\nТехнологии TL;DR  Кластер: Kubernetes Языки: Java, Python, Go, TypeScript Базы Данных: PostgreSQL, MySQL, BigQuery, ClickHouse  Конктруктор интерфейсов Это базовая часть платформы на которой строятся все текущие интерфейсные решения\n Backend: Java для ядра платформы Frontend: Typescript + AngularJS  Микросервисы Языки: Python, Go, Java\nПримеры сервисов: - PixelTracker - Определение QrCode на картинке - ApiProxy\nАсинхронные фоновые процессы Это долгие большие или маленькие задачи, которые запускаются сейчас десятками тысяч в день.\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/apiclientservice/",
	"title": "ApiClientService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     buildClient ( apiName: String, apiVersion: String, userId: long, scopes: List) ApiClient   buildClient ( schemaHostPostVersion: String, userId: long, scopes: List) ApiClient    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/billingservice/",
	"title": "BillingService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     checkAddSkuUsage ( productId: String, skuId: String, plannedAddUsageAmount: long) void   getSkuUsage ( productId: String, skuId: String) UsageRecordCheckResponse   init ( ) void    "
},
{
	"uri": "https://developers.devision.io/meta/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/cryptservice/",
	"title": "CryptService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     checkJWTExpire ( decodedJWT: DecodedJWT) void   decode ( str: String) String   decodeJSONObj ( str: String, clazz: Class) Object   encode ( str: String) String   encode ( str: String, expiresAt: Date) String   encodeJSONObj ( obj: Object) String   encodeJSONObj ( obj: Object, validTime: String) String    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/currentuserservice/",
	"title": "CurrentUserService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     get ( ) MetaUser   getAuthentication ( ) Authentication   getCompanyId ( ) long   getId ( ) long   getIp ( ) String   getLanguage ( ) String   getLanguageId ( ) Integer   hasAuthentication ( ) boolean   hasRole ( role: String) boolean   isAnonymous ( ) boolean   isDebugMode ( ) boolean   isDeveloper ( ) boolean   isNotDeveloper ( ) boolean   reload ( ) void   rememberMe ( ) void   rememberMeIfTokenExistsInUrl ( ) void   setAuthenticate ( user: MetaUser) UsernamePasswordAuthenticationToken   userHasRole ( role: String) boolean    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/datadiffservice/",
	"title": "DataDiffService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     diff ( a: DataResult, b: DataResult, config: ScriptObjectMirror) DataResult   diff ( oldV: DataResult, newV: DataResult, conf: DiffConfig) DataResult    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/datatransformservice/",
	"title": "DataTransformService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     pivot ( in: DataResult, conf: PivotConfig) DataResult   pivot ( in: DataResult, conf: ScriptObjectMirror) DataResult   sum ( o1: Object, o2: Object) Object    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/entityservice/",
	"title": "EntityService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     buildForm ( entityId: String, formMode: FormMode, config: SmartFormConfig) LegoElem   getObject ( entityId: String, objectId: String) DataResult    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/gaservice/",
	"title": "GaService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     eventTrack ( category: String, action: String) void   eventTrack ( category: String, action: String, label: String) void   eventTrack ( category: String, action: String, label: String, value: Long) void   send ( parameters: Map) void    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/htmlservice/",
	"title": "HtmlService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     html2text ( html: String) String    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/legotomarkdownservice/",
	"title": "LegoToMarkdownService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     init ( ) void   toMarkdown ( legoForm: Object, formData: Object) String    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/linkbuildservice/",
	"title": "LinkBuildService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     build ( href: String, content: String) String   getCardFullUrl ( entityId: String, objectId: String, pageId: String) String   getCardFullUrl ( entityId: String, objectId: String, pageId: String, sp: Map) String   getCardFullUrl ( entityId: String, objectId: String, pageId: String, sp: Map, search: Map) String   getFullUrl ( entityId: String, objectId: String, pageId: String) String   getHtmlLink ( content: String, entityId: String, objectId: String) String   getHtmlLink ( content: String, entityId: String, objectId: String, pageId: String) String   getPageFullUrl ( pageId: String, sp: Map) String   getPageFullUrl ( pageId: String, sp: Map, search: Map) String   getPageFullUrl ( pageId: String, sp: Map, search: ScriptObjectMirror) String    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/markdownservice/",
	"title": "MarkdownService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     render ( markdownText: Object) String   render ( markdownText: Object, siteUrl: String) String   render ( markdownText: String) String   render ( markdownText: String, siteUrl: String) String    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/mediaservice/",
	"title": "MediaService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     deleteExpired ( env: Env, mediaId: String) void   get ( env: Env, mediaId: String) MediaFile   getDownloadUrlPart ( id: String) String   getFilesBase64ZipArchive ( files: List) String   getViewUrlPart ( id: String) String   persist ( env: Env, fileBase64Content: String, filename: String, extension: String, mime: String, isPrivate: boolean) MediaFile   persist ( env: Env, fileBase64Content: String, filename: String, extension: String, mime: String, isPrivate: boolean, origin: String) MediaFile   persist ( env: Env, fileBase64Content: String, filename: String, extension: String, mime: String, isPrivate: boolean, ttlInSec: long) MediaFile   prepareFileName ( env: Env, filename: String) String   sendFileToResponse ( response: HttpServletResponse, media: MediaFile, fname: String, addHeadersForDownload: boolean) void   sendHeaders ( response: HttpServletResponse, contentType: String, fname: String, addHeadersForDownload: boolean) void   upsert ( req: UpsertRequest) MediaFile    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/metadatabaseservice/",
	"title": "MetaDatabaseService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     createMetaDataSourceInstance ( db: CDatabase) MetaDataSource   eraseDBPool ( ) void   getAppCacheRedis ( ) RedissonClient   getDatabaseType ( dbAlias: String) DatabaseType   getMDSource ( dbAlias: String) MetaDataSource   getMetaDS ( ) JdbcMetaDataSource   getMetaJdbcTemplate ( ) JdbcTemplate   getRedis ( ) RedissonClient    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/mutatetableservice/",
	"title": "MutateTableService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     mutate ( mutateJob: MutateJob) void   mutate ( request: MutateJobRequest) MutateJobResponse   mutate ( request: ScriptObjectMirror) MutateJobResponse    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/objectlogservice/",
	"title": "ObjectLogService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     buildLog ( ) Log   coreErrorEventTrack ( action: String, label: String, value: Long) void   coreEventTrack ( action: String, label: String) void   coreEventTrack ( action: String, label: String, value: Long) void   log ( entityId: String, objectId: Object, code: Code) void   log ( entityId: String, objectId: Object, code: String) void   log ( objectLog: Log) void   logValue ( entityId: String, objectId: Object, code: Code, value: Object) void   logValue ( entityId: String, objectId: Object, code: Code, value: Object, form: String) void   logValue ( entityId: String, objectId: Object, code: String, value: Object) void   logValue ( entityId: String, objectId: Object, code: String, value: Object, form: String) void    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/smartformservice/",
	"title": "SmartFormService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     handle ( env: Map, originalEnv: Env, vm: ViewModel, pvm: ViewModel) void   handle ( env: Map, originalEnv: Env, vm: ViewModel, pvm: ViewModel, config: ScriptObjectMirror) void   handle ( env: Map, originalEnv: Env, vm: ViewModel, pvm: ViewModel, config: SmartFormConfig) void    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/smartqueryservice/",
	"title": "SmartQueryService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     extractAndCheckMetrics ( reportConfig: SmartQueryConfig, entityKind: EntityKind) List   generateMetaQLRequest ( config: Config, queryConfig: SmartQueryConfig) String   replaceSqlPlaceholdersToEscapedValues ( queryConfig: SmartQueryConfig, sql: String) String   valueToStrValue ( value: Object) String    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/tablecolumnservice/",
	"title": "TableColumnService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     buildAggFn ( aggFn: AggFn, expr: String) String   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: AdvancedFilterData) GeneratedFilter   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: AdvancedFilterData, databaseType: DatabaseType) GeneratedFilter   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: Object) GeneratedFilter   buildFilters ( outputPlaceholderVarName: String, columns: DataResult, data: Object, databaseType: String) GeneratedFilter   escapeDivisionByZero ( text: String, escapePrefix: String, escapePostfix: String) String   extractTableParams ( columns: DataResult, dimensions: List, metrics: List) TableSettings   extractTableParams ( headers: List, dimensions: List, metrics: List, entityKind: EntityKind, strict: boolean) TableSettings   getMetricsFromExpr ( in: String) Set    "
},
{
	"uri": "https://developers.devision.io/meta/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/translateservice/",
	"title": "TranslateService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     getAllPlaceholders ( language: String) Map   i18n ( language: String, text: String, args: Object[], defaultText: String) String   i18n ( placeholder: String) String   i18n ( placeholder: String, args: Object[]) String   i18n ( placeholder: String, args: Object[], defaultText: String) String   i18n ( placeholder: String, defaultText: String) String   i18nEntityFieldName ( entityId: String, fieldName: String) String   i18nEntityName ( entity: CEntity) String   i18nEntityName ( entityId: String) String   i18nPageName ( page: CPage, language: String) String   i18nSqlField ( placeholder: String) String   i18nSqlField ( tableAlias: String, placeholder: String) String   i18nSqlField ( tableAlias: String, placeholder: String, lang: String) String    "
},
{
	"uri": "https://developers.devision.io/meta/reference/java_api/userrecoveryservice/",
	"title": "UserRecoveryService",
	"tags": [],
	"description": "",
	"content": "   Метод и описание Возвращаемый тип     getDoublePasswordHash ( login: String) String   sendNotice ( login: String, appAlias: String, state: String) SendNoticeResponse    "
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-chart/",
	"title": "Элемент me-chart",
	"tags": [],
	"description": "",
	"content": " Основной и единственный элемент для вывода графиков Работает на Google Charts\n@example https://apps.devision.io/page?p=3623\u0026amp;a=35\n@link https://developers.google.com/chart/interactive/docs/gallery\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;curved\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;dualY\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;hAxisMinValue\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;height\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;nativeOptions\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;pieHole\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;sliceVisibilityThreshold\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;stacked\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;stretched\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;vAxisMinValue\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;vAxisTextPosition\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;zoomButton\u0026quot;: \u0026quot;( none | left )\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-chart\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением\ndefaultValue (any) Значение элемента по умолчанию Для некоторых элементов\ndepends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nentityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-input/",
	"title": "Элемент me-input",
	"tags": [],
	"description": "",
	"content": " Основной элемент для ввода данных Использует attrs.type для уточнения внешнего вида элемента. Может принимать вид текстового поля ввода, выпадающего списка, checkbox, radio и пр.\n@returns any - тип результируещего значения зависит от [[IMeInputAttrs.type]] элемента и от значения multiple\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;addObjectButton\u0026quot;: { \u0026quot;cssClass\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;cssProperties\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;drawAsMainElementOnParentElemIsEmpty\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon_image\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; } }, \u0026quot;align\u0026quot;: \u0026quot;( left | right )\u0026quot;, \u0026quot;autoSelect\u0026quot;: \u0026quot;( none | first | if_only_one )\u0026quot;, \u0026quot;contextualClass\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;create\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;ctrlEnterApply\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;enterSubmit\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;exposeSelectedOptionKeys\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;fastViewObjectButton\u0026quot;: { \u0026quot;drawActorList\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;drawTopMenu\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;modalSize\u0026quot;: \u0026quot;( xs, sm, md, lg, fullscreen, max )\u0026quot;, \u0026quot;modalTitle\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;( modal, sidenav, hidden )\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;formInputName\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;groupAddon\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;info\u0026quot;: \u0026quot;(object)\u0026quot;, \u0026quot;inlineElements\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;inlineLabel\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;isPrivate\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;max\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;maxHeight\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;maxSizeMB\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;maxTotalSizeMB\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;minSizeMB\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;( JSON | JSON_OBJECT | HTML | SQL )\u0026quot;, \u0026quot;multiple\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;native\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;options\u0026quot;: [ { \u0026quot;date\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;fast_select\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon_image\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;link\u0026quot;: { \u0026quot;modalSize\u0026quot;: \u0026quot;( xs, sm, lg, normal, max )\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;( _modal, _blank )\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;( href, meta )\u0026quot;, \u0026quot;value\u0026quot;: { \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;mode\u0026quot;: \u0026quot;( modal, sidenav, hidden )\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;(string)\u0026quot; } }, \u0026quot;mentio\u0026quot;: [ { \u0026quot;date\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;items\u0026quot;: [ { \u0026quot;date\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;section\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;section\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;triggerChar\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;section\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;style\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;value\u0026quot;: { \u0026quot;unit\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;value\u0026quot;: \u0026quot;(any)\u0026quot; } } ], \u0026quot;pattern\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;placeholder\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;readonly\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refreshOptionsButton\u0026quot;: { \u0026quot;refPvmBeforeRefresh\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; } }, \u0026quot;required\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;rows\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;scaleByContent\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;step\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;style\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;timePicker\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;ttlInSec\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;( text | select | duallist | submit | textarea | checkbox | radio | me-summary-btn | me-tabs | filecontent | url | tel | email | percent )\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;valueMultiplier\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;verticalColumns\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;viewSize\u0026quot;: \u0026quot;( xs | sm | lg )\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-input\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением\ndefaultValue (any) Значение элемента по умолчанию Для некоторых элементов\ndepends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nentityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-lego/",
	"title": "Элемент me-lego",
	"tags": [],
	"description": "",
	"content": " Основной элемент-контейнер для рендеринга элементов. Рендерится в me-page как основной контейнер, а так же может быть использован внутри себя и себе подобных контейнеров: me-lego, me-lego-list, me-wizard\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;background\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;collapsable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;defaultBlockEnabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: { \u0026quot;elemLabelGridSize\u0026quot;: \u0026quot;(number)\u0026quot; }, \u0026quot;hideLabelsAttr\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;logo\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;openContent\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;optional\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;style\u0026quot;: \u0026quot;( default | card )\u0026quot;, \u0026quot;viewSize\u0026quot;: \u0026quot;( sm )\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;elems\u0026quot;: [ { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-lego\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением defaultValue (any) Значение элемента по умолчанию Для некоторых элементов depends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда **@example** https://apps.devision.io/page?p=4329\u0026a=35 **@example** https://apps.devision.io/page?p=3597\u0026a=35 elems [object Object] entityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-lego-list/",
	"title": "Элемент me-lego-list",
	"tags": [],
	"description": "",
	"content": " Основной элемент-контейнер для рендеринга элементов. Рендерится в me-page как основной контейнер, а так же может быть использован внутри себя и себе подобных контейнеров: me-lego, me-wizard, но не в другом me-lego-list (для этого используйте me-lego-modal)\n@example https://apps.devision.io/page?p=3723\u0026amp;a=35\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;addBtnText\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;asJson\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;hideNonFirstLabels\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;markDelete\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;sortable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;style\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;elems\u0026quot;: [ { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-lego-list\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением defaultValue (any) Значение элемента по умолчанию Для некоторых элементов depends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда **@example** https://apps.devision.io/page?p=4329\u0026a=35 **@example** https://apps.devision.io/page?p=3597\u0026a=35 elems [object Object] entityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-lego-modal/",
	"title": "Элемент me-lego-modal",
	"tags": [],
	"description": "",
	"content": " Используется на сложных формах для того, чтобы спрятать какую-то часть. Или например если надо сделать me-lego-list внутри дургого me-lego-list (без me-lego-modal это технически это невозможно).\n@example https://apps.devision.io/page?p=3723\u0026amp;a=35\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;modalSize\u0026quot;: \u0026quot;( xs, sm, md, lg, fullscreen, max )\u0026quot;, \u0026quot;modalTitle\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;( modal, sidenav, hidden )\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;elems\u0026quot;: [ { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-lego-modal\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением defaultValue (any) Значение элемента по умолчанию Для некоторых элементов depends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда **@example** https://apps.devision.io/page?p=4329\u0026a=35 **@example** https://apps.devision.io/page?p=3597\u0026a=35 elems [object Object] entityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-pivot/",
	"title": "Элемент me-pivot",
	"tags": [],
	"description": "",
	"content": " Сводная таблица (Pivot Table) на JS Загружает все даныые для себя на клиента и крутит и считает все на JavaScript Не рекомендуется вгружать в контрол более 10 000 строк Используется в инструменте \u0026ldquo;Анализ данных\u0026rdquo; для [[IMeTable]]\n@link https://pivottable.js.org\n@example https://apps.devision.io/page?p=4230\u0026amp;a=35\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;datatype\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;native\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;skipColGrandTotals\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;skipEditControls\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;skipRowGrandTotals\u0026quot;: \u0026quot;(boolean)\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-pivot\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением\ndefaultValue (any) Значение элемента по умолчанию Для некоторых элементов\ndepends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nentityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-submit/",
	"title": "Элемент me-submit",
	"tags": [],
	"description": "",
	"content": " Использует все от [[IMeInput]] и просто рефрешит форму при нажатии\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;addObjectButton\u0026quot;: { \u0026quot;cssClass\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;cssProperties\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;drawAsMainElementOnParentElemIsEmpty\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon_image\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; } }, \u0026quot;align\u0026quot;: \u0026quot;( left | right )\u0026quot;, \u0026quot;autoSelect\u0026quot;: \u0026quot;( none | first | if_only_one )\u0026quot;, \u0026quot;contextualClass\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;create\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;ctrlEnterApply\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;enterSubmit\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;exposeSelectedOptionKeys\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;fastViewObjectButton\u0026quot;: { \u0026quot;drawActorList\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;drawTopMenu\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;modalSize\u0026quot;: \u0026quot;( xs, sm, md, lg, fullscreen, max )\u0026quot;, \u0026quot;modalTitle\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;( modal, sidenav, hidden )\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;formInputName\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;groupAddon\u0026quot;: { \u0026quot;text\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;info\u0026quot;: \u0026quot;(object)\u0026quot;, \u0026quot;inlineElements\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;inlineLabel\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;isPrivate\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;max\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;maxHeight\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;maxSizeMB\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;maxTotalSizeMB\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;min\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;minSizeMB\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;( JSON | JSON_OBJECT | HTML | SQL )\u0026quot;, \u0026quot;multiple\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;native\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;options\u0026quot;: [ { \u0026quot;date\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;fast_select\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon_image\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;image\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;link\u0026quot;: { \u0026quot;modalSize\u0026quot;: \u0026quot;( xs, sm, lg, normal, max )\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;( _modal, _blank )\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;( href, meta )\u0026quot;, \u0026quot;value\u0026quot;: { \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;mode\u0026quot;: \u0026quot;( modal, sidenav, hidden )\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;url\u0026quot;: \u0026quot;(string)\u0026quot; } }, \u0026quot;mentio\u0026quot;: [ { \u0026quot;date\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;items\u0026quot;: [ { \u0026quot;date\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;description\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;section\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;section\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;triggerChar\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;section\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;style\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;value\u0026quot;: { \u0026quot;unit\u0026quot;: { \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;value\u0026quot;: \u0026quot;(any)\u0026quot; } } ], \u0026quot;pattern\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;placeholder\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;readonly\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refreshOptionsButton\u0026quot;: { \u0026quot;refPvmBeforeRefresh\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; } }, \u0026quot;required\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;rows\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;scaleByContent\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;step\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;style\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;timePicker\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;ttlInSec\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;type\u0026quot;: \u0026quot;( text | select | duallist | submit | textarea | checkbox | radio | me-summary-btn | me-tabs | filecontent | url | tel | email | percent )\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;valueMultiplier\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;verticalColumns\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;viewSize\u0026quot;: \u0026quot;( xs | sm | lg )\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-submit\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением\ndefaultValue (any) Значение элемента по умолчанию Для некоторых элементов\ndepends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nentityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-table/",
	"title": "Элемент me-table",
	"tags": [],
	"description": "",
	"content": " Основной и единственный элемент для вывода таблиц и редактируемых таблиц\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;analyzable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;addObjectButton\u0026quot;: { \u0026quot;cssClass\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;cssProperties\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;disabled\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;drawAsMainElementOnParentElemIsEmpty\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon_image\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;title\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; } }, \u0026quot;childEntityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;editable\u0026quot;: { \u0026quot;hideAddRowButton\u0026quot;: \u0026quot;(true)\u0026quot; }, \u0026quot;exportOptions\u0026quot;: { \u0026quot;dialog\u0026quot;: \u0026quot;(boolean)\u0026quot; }, \u0026quot;goalSeek\u0026quot;: { \u0026quot;defaultVariantId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;variantsRefPvmData\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;hiddenColumns\u0026quot;: { \u0026quot;allowedGroupIds\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;columns\u0026quot;: [ \u0026quot;(string)\u0026quot; ] }, \u0026quot;menu\u0026quot;: { \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;includeCellValues\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;includeColumnsMetadata\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;includeRowValues\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;modalSize\u0026quot;: \u0026quot;( xs, sm, md, lg, fullscreen, max )\u0026quot;, \u0026quot;modalTitle\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;( modal, sidenav, hidden )\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;options\u0026quot;: { \u0026quot;bodyCompile\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;entityCardLink\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;header\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;nowrapData\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;pinHeader\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;rowHeaders\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;rowsCounter\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;tableCssClass\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;search\u0026quot;: { \u0026quot;placeholder\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; } }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;filterable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-table\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" analyzable (boolean) Будет ли работать бежим \"Анализ данных\" на таблице attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением\ndefaultValue (any) Значение элемента по умолчанию Для некоторых элементов\ndepends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nentityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Можно ли экспортировать таблицу\nfilterable (boolean) Тех. настройка для автофильторв Только для разработчиков\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-tabs/",
	"title": "Элемент me-tabs",
	"tags": [],
	"description": "",
	"content": " Элементы табсета ( [[IMeTabs.elems]] ) и есть набор табов\n@example https://apps.devision.io/page?p=3708\u0026amp;a=35\n@example https://apps.devision.io/page?p=4283\u0026amp;a=35\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;entityCardLink\u0026quot;: { \u0026quot;drawActorList\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;drawTopMenu\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;env\u0026quot;: { \u0026quot;state\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;modalSize\u0026quot;: \u0026quot;( xs, sm, md, lg, fullscreen, max )\u0026quot;, \u0026quot;modalTitle\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;mode\u0026quot;: \u0026quot;( modal, sidenav, hidden )\u0026quot;, \u0026quot;pageId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;loadAllOnInit\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;removable\u0026quot;: \u0026quot;(boolean)\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;elems\u0026quot;: [ { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-tabs\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением defaultValue (any) Значение элемента по умолчанию Для некоторых элементов depends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда **@example** https://apps.devision.io/page?p=4329\u0026a=35 **@example** https://apps.devision.io/page?p=3597\u0026a=35 elems [object Object] entityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
},
{
	"uri": "https://developers.devision.io/meta/reference/ui_controls/me-wizard/",
	"title": "Элемент me-wizard",
	"tags": [],
	"description": "",
	"content": " Элементы визарда ( [[IMeWizard.elems]] ) и есть набор шагов\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\nОбщее Обратите внимание на структуру всех классов\nСтруктура { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;attrs\u0026quot;: { \u0026quot;loadAllOnInit\u0026quot;: \u0026quot;(boolean)\u0026quot; }, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;elems\u0026quot;: [ { \u0026quot;__tid\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;align\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;bindAttrs\u0026quot;: [ { \u0026quot;source\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;target\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;defaultValue\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;depends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;errors\u0026quot;: [ { \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;name\u0026quot;: \u0026quot;(string)\u0026quot; } ], \u0026quot;exportable\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;formHorizontal\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;help\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;icon\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;inlineForm\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;listen\u0026quot;: [ { \u0026quot;$promise\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;code\u0026quot;: [ \u0026quot;( ADD | SET, REMOVE )\u0026quot; ], \u0026quot;entityId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;objectId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;pubSubChannel\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;refreshRefPvmData\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;reload\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selectAfterAdd\u0026quot;: \u0026quot;(boolean)\u0026quot; } ], \u0026quot;name\u0026quot;: \u0026quot;me-wizard\u0026quot;, \u0026quot;offset\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;order\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;persistValueView\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;refPvmData\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;refPvmValidator\u0026quot;: { \u0026quot;additionalPartialLoad\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;dataId\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;id\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;spQueryDepends\u0026quot;: [ \u0026quot;(string)\u0026quot; ], \u0026quot;waitingId\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;selectedValueView\u0026quot;: \u0026quot;(any)\u0026quot;, \u0026quot;selfDepends\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;span\u0026quot;: \u0026quot;(number)\u0026quot;, \u0026quot;tooltip\u0026quot;: { \u0026quot;content\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;label\u0026quot;: \u0026quot;(string)\u0026quot; }, \u0026quot;valid\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;validateInProgress\u0026quot;: \u0026quot;(boolean)\u0026quot;, \u0026quot;value\u0026quot;: \u0026quot;(string)\u0026quot;, \u0026quot;visible\u0026quot;: \u0026quot;(boolean)\u0026quot; }  __tid (any) Автоматически генерируемое приватное поле align (string) Позиционирование элемента в ячейке серки **@default** \"left\" attrs [object Object] bindAttrs [object Object] Когда нужно подписаться на изменение данные в pvm и заполнять какие-то поля элемента Например, менять elems в me-lego динамически или запонять me-input[type=text] расчетным значением defaultValue (any) Значение элемента по умолчанию Для некоторых элементов depends (string) Указываться от корневого me-lego вставленного через html. Работает только когда у элемента есть параметр refPvmData и refPvmData с depends и зависимость еще не загружена. Также есть возможность делать зависимости от текущего уровня иерархии, это удобно, когда неизвестна родительская вложенность. Например, когда у вас одна и та же динамическая форма подгружается в разных местах приложения на разном уровне вложенности или даже в me-lego-list иногда **@example** https://apps.devision.io/page?p=4329\u0026a=35 **@example** https://apps.devision.io/page?p=3597\u0026a=35 elems [object Object] entityId (string) Meta EntityId Для некоторых элементов, напрмиер [[IMeInput]], [[IMeTable]]\nerrors [object Object] Список ошибок элемента пока только валидации, но определенно все ошибки будут тут\nexist  Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;exist\u0026rdquo; || editGroup.card.name == \u0026ldquo;exist23\u0026rdquo;\u0026rsquo; Для me-lego-list можно использовать нотацию [] для получения доступа в элементу списка, Например: env.sp.obj.filled[].deadline_enabled === true, где filled - id me-lego-list\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=4329\u0026amp;a=35\nexportable (boolean) Имеет ли экспорт этот элемент\nformHorizontal (boolean) Если элемента поддерживает, вывести его в стиле формы ключ, значение. Чтобы заголовок был на уровне элемента\nhelp (string) Доп информация, рисуется под label или под элментом Зависит от типа элемента\ni18n  MeElem property internationalization (for label and help for example). Key of i18m map is elem property name, value is message key of i18n file\nicon (string) Иконка Font Awesome Например fa-bicycle\n@link http://ui.adplatform.lan/Static_Full_Version/icons.html\nid (string) ID данных элемента Будет доступно в env.sp.{ID} или как вложенная структура, если это [[IMeElemContainer]]\ninlineForm (boolean) Нужно ли отрисовывать элемент без сетки в виде inlineForm (bootstrap)\n@link {http://stackoverflow.com/questions/12201835/form-inline-inside-a-form-horizontal-in-twitter-bootstrap}\nlabel (string) Заголовок элемента Обычно над элементом, на некоторых не рисуется вообще\nlisten [object Object] Подписка на изменения объектов. Пока работает только для изменений вызваных в модальном окне Например у вас таблица со списоком аккуантов и в \u0026ldquo;+ Аккаунт\u0026rdquo; вы можете добавить или привязать аккаунт, а после сохранения в модальном окне, родительская таблциа должна пересчитаться\nname (string) Название элемента Например: me-lego, me-input\noffset (number) Отстут по сетке справа от 0 до12\norder (number) Прзиция элемента в сетке, чем меньше значение, тем элемент выше и левее\npersistValueView (boolean) Блок обрабатывает вписывание в элемент текущего выбранного пункта в поле selectedValueView, чтобы можно быьт делать, label + name в скрытом режиме\nrefPvmData [object Object] Инструкции по получению данных для [[IMeInputAttrs.options]] или таблицы\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n@example https://apps.devision.io/page?p=3597\u0026amp;a=35\nrefPvmValidator [object Object] Пользовательская валидация\n@example https://apps.devision.io/page?p=3443\u0026amp;a=35\nselectedValueView (any) Текстовое представление выбранного значения\nselfDepends (boolean) Зависимость от себя самого, нужно для editable [[IMeTable]] и прототип для поиска [[IMeInputAttrs.options]] в me-input для частичной подгрузки данных\n@beta\nspan (number) Размер по сетке справа от 0 до12\ntooltip [object Object] Стандартный мета тултип\nvalid (boolean) Элемент валидный\nvalidateInProgress (boolean) Принимает значение true на момент асинхронной валидации\nvalue (string) для некоторых элементов\nvisible (boolean) Angular expression от рута vm страницы. Обратите внимание, что пути абсотюлтные, в отличие от \u0026ldquo;depends\u0026rdquo; в элементах Расчет идет на стороне браузера Например: \u0026lsquo;editGroup.card.name == \u0026ldquo;visible\u0026rdquo;\u0026rsquo;\n@example https://apps.devision.io/page?p=3570\u0026amp;a=35\n"
}]