<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Руководства on META | Devision Developers</title>
    <link>https://developers.devision.io/meta/guides/</link>
    <description>Recent content in Руководства on META | Devision Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate>
    
	<atom:link href="https://developers.devision.io/meta/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Быстрый старт</title>
      <link>https://developers.devision.io/meta/guides/quick_start/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/quick_start/</guid>
      <description>Для успешного начала работы вам стоит ознакомится с документацией из этого списка:
 Типы скриптов Шаблонизация Окружение запроса Зайти в МЕТА Примеры  </description>
    </item>
    
    <item>
      <title>Google Analytics</title>
      <link>https://developers.devision.io/meta/guides/google_analytics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/google_analytics/</guid>
      <description>Google Analytics уже глубоко интегрирован в платформу и многие нужные вам события с интерфейса и backend зачастую автоматически будут поступать в GA.
Автоматически собираемые действия  Открытия страниц Открытие модальных окон (в т.ч. sidenav) Регистрация События ADD из ObjectLogService Клик на кнопку добавление объекта в me-select Выбор пункта меню в me-input type=menu-btn  Отправка событий через Measurement Protocol В скриптах meta/js или meta/sql (с помощью шаблонизатора) вы можете отправлять нужные вам события в GA.</description>
    </item>
    
    <item>
      <title>Жизненный цикл</title>
      <link>https://developers.devision.io/meta/guides/request_life_cycle/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/request_life_cycle/</guid>
      <description>Окружение запроса  env - объект-окружение запроса к серверу. vm - объект для удобной работы с ответом клиенту. На лего странцах отдельный vm на каждый script. pvm - только на LEGO-страницах. Отвечает за хранение данных на всех странце, содержит в себе vm script. DataResult - низкоуровневый класс, отвечающий за ответ с данными по EntityPage. Его нельзя получить так как он никуда не передается, существует вне scipt - над ним. Создается вручную при необходимости только в meta/js скриптах.</description>
    </item>
    
    <item>
      <title>Отслеживание изменений сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_listeners/</guid>
      <description>Мотивация Бывают случаи, когда у вас есть форма создания/редактирования объекта и в ней есть инпут с выбором объекта другого типа. Например: вы добавляете товар и выбираете его категорию, а если категории нет, то вы хотите прямо здесь ее создать.
В этом случае у инпута выбора категории нужно добавить кнопку создания объекта через &amp;ldquo;addObjectButton&amp;rdquo; и добавить прослушку событий по объектам указаного типа через &amp;ldquo;listen&amp;rdquo; чтобы после создания объект появлвлся в выпадающем списке.</description>
    </item>
    
    <item>
      <title>Обработчики событий сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_handlers/</guid>
      <description>Мотивация Часто хочется иметь middleware функцию проверки доступа к конкретному объекту на карточке объекта для того, чтобы не делать проверку досупа на каждой странице сущности.
Чтобы сделать обработчик вам нужно:
 Сделать страницы с ролью &amp;ldquo;Обработчики событий сущности&amp;rdquo;
 Сделать скрипт cо state и id равному типу обработчика.
  Например:
&amp;lt;script type=&amp;quot;...&amp;quot; id=&amp;quot;check_access&amp;quot; state=&amp;quot;check_access&amp;quot;&amp;gt; SELECT (CASE WHEN author_user_id = :env.userId THEN 200 ELSE 403 END) as status_code FROM pubic.</description>
    </item>
    
    <item>
      <title>Типы скриптов</title>
      <link>https://developers.devision.io/meta/guides/script_types/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/script_types/</guid>
      <description>Мотивация Скрипты это блоки получения или изменения данных, имеют атрибуты: - type - определяет тип получения данных: sql, js - id - имя данных для меты, используется для последующих обращений к данным. Грубо говоря имя переменной
Ключевое слово internal Используется для того, чтобы получить данные на серверной стороне и не отправлять их на клиент. Это ускоряет страницу и позволяет 100% защитить программиста от случайно передачи секретной информации на клиент.</description>
    </item>
    
    <item>
      <title>Шаблонизация</title>
      <link>https://developers.devision.io/meta/guides/template_engines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/template_engines/</guid>
      <description>Для шаблонизации используется freemarker.org. Отсутствие переменных при шаблонизации сейчас не является фатальной ошибкой, переменная в такой случае будет заменяться пустой строкой.
Backend шаблонизация Условия do-if Используется для условной фильтрации скриптов и элементов на бекенде. Скрипты не будет исполняться и будет предотвращать отрисовку связанных элементов. Элементы, при установки do-if на них не будут приходить на фронтенд
Пример: https://samples-demo.devision.io/page?p=4551&amp;amp;a=35
&amp;lt;script type=&amp;quot;meta/sql&amp;quot; db-alias=&amp;quot;meta&amp;quot; id=&amp;quot;all_activity&amp;quot; do-if=&amp;quot;env.sp.activity_mode==&#39;all&#39;&amp;quot;&amp;gt; select now() &amp;lt;/script&amp;gt;  Функции Пример вызова:</description>
    </item>
    
    <item>
      <title>Графики</title>
      <link>https://developers.devision.io/meta/guides/charts/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/charts/</guid>
      <description>Являются элементами me-chart. Работают на основе google charts. Примеры тут: http://samples-demo.devision.io/page?a=35&amp;amp;p=3623
Имеют опцию &amp;ldquo;nativeOptions&amp;rdquo; для передачи нативных параметров. Не рекомендуется это использоваться просто так из-за невозможности поддержки возможности смены графиков или более легкого обновления версии при отсутствии обратной совместимости.
nativeOptions можно использовать как вариант для тестирования и с последующим запросом впиливания опции как мета параметр графиков.</description>
    </item>
    
    <item>
      <title>Кеширование</title>
      <link>https://developers.devision.io/meta/guides/cache/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/cache/</guid>
      <description>Многие системы имеют встроенные механизмы кеширование и META не исключение.
В META есть два вида кеша - пользовательский и глобальный.
У скрипта есть два атрибута:
 &amp;ldquo;cache&amp;rdquo; - время жизни кеша в формате 10s - секунды, 10m - минуты, 10h часы. &amp;ldquo;cache-company&amp;rdquo; - добавляется к настройке &amp;ldquo;cache&amp;rdquo; и говорит о том, что кеш не зависит от пользователя, но зависит от env.companyId. Без &amp;ldquo;cache&amp;rdquo; не работает. Не может принимать значения true/false &amp;ldquo;cache-global&amp;rdquo; - добавляется к настройке &amp;ldquo;cache&amp;rdquo; и говорит о том, что кеш глобальный и не зависит от пользователя.</description>
    </item>
    
    <item>
      <title>Построение URL</title>
      <link>https://developers.devision.io/meta/guides/build_url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/build_url/</guid>
      <description>При программировании в Мете во всех случаях стройте ссылки стандартными функциями, всегда стройте относительные ссылки (без имени домена).
Стандартные механизмы В мете уже есть стандартные средства генерации url на карточку объекта или на обычную страницу. Используйте для этого:
 LinkBuildService для meta/js $root.buildEnvUrl для html шаблонов (https://apps.devision.io/page?p=3788&amp;amp;a=35) Стройте ссылки в таблице запросом через hreffield или entity_linkfield (https://apps.devision.io/page?p=3292&amp;amp;a=35)  Параметры  a - applicationId p - pageId e - entityId. ID типа сущности.</description>
    </item>
    
    <item>
      <title>Интернационализация (i18n)</title>
      <link>https://developers.devision.io/meta/guides/i18n/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/i18n/</guid>
      <description>На системном уровне поддерживаются языки: ru, en.
 Для того, чтобы начать переводить нужно:
 добавить новые компоненты в таблицу meta.component, если текущих вам недостаточно разметить страницы копонентами в настройках старниц в app-content запустить i18n-app.py и собрать данные на перевод. если есть новые компоненты entity надо поместить в папку entity в компоненте  i18n-app.py отпарсит контент мета-страниц на наличие размерки перевода, а так же обойдет entity в app-content и соберет данные на перевод.</description>
    </item>
    
    <item>
      <title>Nginx Proxy Headers</title>
      <link>https://developers.devision.io/meta/guides/nginx/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/nginx/</guid>
      <description>Настраиваются на nginx при проксировании запосов в Java приложение, или через Chrome плагин ModHeader (https://chrome.google.com/webstore/detail/modheader/idgpnmonknjnojddfkpgkljpfnnfcklj) для разработки
X-META-AppID Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр
server { listen *:80; server_name example.com; charset utf8; location / { proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr; proxy_set_header X-META-AppID 3; proxy_pass http://127.0.0.1:8083; } }  X-META-Allowed-Apps Говорит о том, что МЕТА должна отвечать пользователю как конкретное приложение с установленным лого, css и пр Отличается от HEADER_X_META_APP_ID тем, что это будет работать как просто meta.</description>
    </item>
    
    <item>
      <title>Именование сущностей в БД</title>
      <link>https://developers.devision.io/meta/guides/db_naming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/db_naming/</guid>
      <description>При разработке новой БД предлагается придерживаться следующих правил. При этом, если у вас есть готовая БД, то вы не должны хотеть полностью переделать ее соглашения, так как это бесполезная работа. Просто продолжайте использовать то, что у вас есть.
 Все таблицы должны иметь несоставной первичный ключ, который должен называться id Все таблицы, представления, функции, триггерные функции и типы должны иметь комментарий Поля таблиц и view должны иметь комментарий. Исключения: поля с внешними ключами, общепонятные поля (первичный ключ, views, clicks, name, title и т.</description>
    </item>
    
    <item>
      <title>Тикеты</title>
      <link>https://developers.devision.io/meta/guides/ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/ticket/</guid>
      <description>Таблицы  issue: Непосредственно сами тикеты. Основная таблица issue_entity: Сущности, доступные для выбора &amp;ldquo;категории&amp;rdquo; тикета при создании. Тип объекта, в рамках которого делается тикет. Например тикет может быть по клиенту, медиаплану, сотруднику issue_field: Доп. поля, которые можно навешивать потом на типы тикетов issue_logwork: Трекинг времени по тикетам issue_msg: Комментарии к тикетам, приложенные файлы issue_priority: Справочник приоритетов тикетов issue_status: Справочник статусов тикетов issue_type: Справочник типов тикетов, Тут настраивается доступность типов тикетов для issue_entity, доступность основных или доп полей  Управляющие функции БД Пользовательские функции для изменения бизнес логики отмечены жирным шрифтом.</description>
    </item>
    
  </channel>
</rss>