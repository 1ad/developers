<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Руководства on META | Devision Developers</title>
    <link>https://developers.devision.io/meta/guides/</link>
    <description>Recent content in Руководства on META | Devision Developers</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ru-ru</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate>
    
	<atom:link href="https://developers.devision.io/meta/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Быстрый старт</title>
      <link>https://developers.devision.io/meta/guides/quick_start/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/quick_start/</guid>
      <description>Для успешного начала работы вам стоит ознакомится с документацией из этого списка:
 Типы скриптов Шаблонизация Окружение запроса Зайти в МЕТА Примеры  </description>
    </item>
    
    <item>
      <title>Состояния страниц</title>
      <link>https://developers.devision.io/meta/guides/understanding_env_states/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/understanding_env_states/</guid>
      <description>Введение env.state - id текущего состояния страницы. Это можно сравнить с action в контроллере MVC. По умолчанию default env.sp - параметры состояния
Код примера Вот простой код для примера. Тут три ссылки, которые меняют состояние страницы. В script-ах указаны states, в которых script будет участвовать (будет выполняться). Если states для script или elem не указан, то script или elem участвует во всех state
&amp;lt;elem&amp;gt; &amp;lt;tpl&amp;gt; &amp;lt;a ng-click=&amp;quot;changeState(&#39;first&#39;, {&#39;foo&#39;:1})&amp;quot;&amp;gt;to first&amp;lt;/a&amp;gt; | &amp;lt;a ng-click=&amp;quot;changeState(&#39;two&#39;, {&#39;bar&#39;:2})&amp;quot;&amp;gt;to two&amp;lt;/a&amp;gt; | &amp;lt;a ng-click=&amp;quot;changeState(&#39;three&#39;, env.</description>
    </item>
    
    <item>
      <title>Google Sheets</title>
      <link>https://developers.devision.io/meta/guides/google_sheets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/google_sheets/</guid>
      <description>Мотивация Иногда пользователи хотят управлять отчетами через интеграцию с Google Sheets
Документация по query language: https://developers.google.com/chart/interactive/docs/querylanguage#language-clauses
Административные настройки сервера Для того, чтобы это заработало в основном конфигурационном файле меты должен быть заполнен блок googleShareAccount, где нужно вписать google service account настройки из формата json в формате yaml. После указания ваши пользователи смогут расшаривать файлы на ваш сервисный аккаунт и мета будет получать к ним доступ.
например у нас это аккаунт - robot-valera@devision-io.</description>
    </item>
    
    <item>
      <title>Окружение запроса</title>
      <link>https://developers.devision.io/meta/guides/request_response_vars/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/request_response_vars/</guid>
      <description>Введение  env - объект-окружение запроса к серверу. vm - объект для удобной работы с ответом клиенту. На лего странцах отдельный vm на каждый script. pvm - только на LEGO-страницах. Отвечает за хранение данных на всех странце, содержит в себе vm script. DataResult - низкоуровневый класс, отвечающий за ответ с данными по EntityPage. Его нельзя получить так как он никуда не передается, существует вне scipt - над ним. Создается вручную при необходимости только в meta/js скриптах.</description>
    </item>
    
    <item>
      <title>Отслеживание изменений сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_listeners/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_listeners/</guid>
      <description>Мотивация Бывают случаи, когда у вас есть форма создания/редактирования объекта и в ней есть инпут с выбором объекта другого типа. Например: вы добавляете товар и выбираете его категорию, а если категории нет, то вы хотите прямо здесь ее создать.
В этом случае у инпута выбора категории нужно добавить кнопку создания объекта через &amp;ldquo;addObjectButton&amp;rdquo; и добавить прослушку событий по объектам указаного типа через &amp;ldquo;listen&amp;rdquo; чтобы после создания объект появлвлся в выпадающем списке.</description>
    </item>
    
    <item>
      <title>Обработчики событий сущностей</title>
      <link>https://developers.devision.io/meta/guides/entity_handlers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/entity_handlers/</guid>
      <description>Мотивация Часто хочется иметь middleware функцию проверки доступа к конкретному объекту на карточке объекта для того, чтобы не делать проверку досупа на каждой странице сущности.
Чтобы сделать обработчик вам нужно:
 Сделать страницы с ролью &amp;ldquo;Обработчики событий сущности&amp;rdquo;
 Сделать скрипт cо state и id равному типу обработчика.
  Например:
&amp;lt;script type=&amp;quot;...&amp;quot; id=&amp;quot;check_access&amp;quot; state=&amp;quot;check_access&amp;quot;&amp;gt; SELECT (CASE WHEN author_user_id = :env.userId THEN 200 ELSE 403 END) as status_code FROM pubic.</description>
    </item>
    
    <item>
      <title>Шаблонизация</title>
      <link>https://developers.devision.io/meta/guides/template_engines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/template_engines/</guid>
      <description>Для шаблонизации используется freemarker.org. Отсутствие переменных при шаблонизации сейчас не является фатальной ошибкой, переменная в такой случае будет заменяться пустой строкой.
Функции Пример вызова:
 ${get_bean(String)} - Получение инстанса Java сервиса ${to_json(Object)} - Конвертация объекта в json ${to_date(String)} - Приведение к дате ${pg_quote_literal(String)} - Экранирование строки для PostgreSQL ${pg_quote_ident(String)} - Экранирование идентификатора (имя столбца, таблицы, схемы) для PostgreSQL  Полезно знать! Есть простой способ привести переменную-объект из env.sp к json строке.</description>
    </item>
    
    <item>
      <title>Графики</title>
      <link>https://developers.devision.io/meta/guides/charts/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/charts/</guid>
      <description>Являются элементами me-chart. Работают на основе google charts. Примеры тут: http://meta.realweb.ru/page?a=35&amp;amp;p=3623
Имеют опцию &amp;ldquo;nativeOptions&amp;rdquo; для передачи нативных параметров. Не рекомендуется это использоваться просто так из-за невозможности поддержки возможности смены графиков или более легкого обновления версии при отсутствии обратной совместимости.
nativeOptions можно использовать как вариант для тестирования и с последующим запросом впиливания опции как мета параметр графиков.</description>
    </item>
    
    <item>
      <title>Кеширование</title>
      <link>https://developers.devision.io/meta/guides/cache/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/cache/</guid>
      <description>Многие системы имеют встроенные механизмы кеширование и META не исключение.
В META есть два вида кеша - пользовательский и глобальный. Кеш зависит от env (applicationId, objectId, stateParams, &amp;hellip;)
У скрипта есть два атрибута:
 &amp;ldquo;cache&amp;rdquo; - время жизни кеша в формате 10s - секунды, 10m - минуты, 10h часы. &amp;ldquo;cache-global&amp;rdquo; - добавляется к настройке &amp;ldquo;cache&amp;rdquo; и говорит о том, что кеш глобальный и не зависит от пользователя. Без &amp;ldquo;cache&amp;rdquo; не работает.</description>
    </item>
    
    <item>
      <title>Построение URL</title>
      <link>https://developers.devision.io/meta/guides/build_url/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/build_url/</guid>
      <description>При программировании в Мете во всех случаях стройте ссылки стандартными функциями, всегда стройте относительные ссылки (без имени домена).
Стандартные механизмы В мете уже есть стандартные средства генерации url на карточку объекта или на обычную страницу. Используйте для этого:
 LinkBuildService для meta/js $root.buildEnvUrl для html шаблонов (https://apps.devision.io/page?p=3788&amp;amp;a=35) Стройте ссылки в таблице запросом через hreffield или entity_linkfield (https://apps.devision.io/page?p=3292&amp;amp;a=35)  Параметры  a - applicationId p - pageId e - entityId. ID типа сущности.</description>
    </item>
    
    <item>
      <title>Язык запросов META (METAQL)</title>
      <link>https://developers.devision.io/meta/guides/metaql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/metaql/</guid>
      <description>METAQL - Это защищенный SQL для запросов к данным меты. Основан на синтаксисах Oracle + PostgreSQL. Призван дать хороший и безопасный API к данным таблиц или views ваших БД.
Особенности  Поддерживаются только SELECT запросы Поддерживается только AND условия Нельзя называть поля или алясы зарезарвированными именами: date Нет прообразований типов JOIN пока не поддерживаются  Функции В METAQL разрешены не все функции, ниже представлен список доступных на текущий момент.</description>
    </item>
    
    <item>
      <title>Именование сущностей в БД</title>
      <link>https://developers.devision.io/meta/guides/db_naming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/db_naming/</guid>
      <description>При разработке новой БД предлагается придерживаться следующих правил. При этом, если у вас есть готовая БД, то вы не должны хотеть полностью переделать ее соглашения, так как это бесполезная работа. Просто продолжайте использовать то, что у вас есть.
 Все таблицы должны иметь несоставной первичный ключ, который должен называться id Все таблицы, представления, функции, триггерные функции и типы должны иметь комментарий Поля таблиц и view должны иметь комментарий. Исключения: поля с внешними ключами, общепонятные поля (первичный ключ, views, clicks, name, title и т.</description>
    </item>
    
    <item>
      <title>Тикеты</title>
      <link>https://developers.devision.io/meta/guides/ticket/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://developers.devision.io/meta/guides/ticket/</guid>
      <description>Таблицы  issue: Непосредственно сами тикеты. Основная таблица issue_entity: Сущности, доступные для выбора &amp;ldquo;категории&amp;rdquo; тикета при создании. Тип объекта, в рамках которого делается тикет. Например тикет может быть по клиенту, медиаплану, сотруднику issue_field: Доп. поля, которые можно навешивать потом на типы тикетов issue_logwork: Трекинг времени по тикетам issue_msg: Комментарии к тикетам, приложенные файлы issue_priority: Справочник приоритетов тикетов issue_status: Справочник статусов тикетов issue_type: Справочник типов тикетов, Тут настраивается доступность типов тикетов для issue_entity, доступность основных или доп полей  Управляющие функции БД Пользовательские функции для изменения бизнес логики отмечены жирным шрифтом.</description>
    </item>
    
  </channel>
</rss>